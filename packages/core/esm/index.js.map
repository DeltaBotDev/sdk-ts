{
  "version": 3,
  "sources": ["../src/stores/index.ts", "../src/utils/format.ts", "../src/utils/dayjs.ts", "../src/utils/common.ts", "../src/config/index.ts", "../src/utils/token.ts", "../src/utils/request.ts", "../src/services/index.ts", "../src/services/token.ts", "../src/lib/pair.ts", "../src/services/bot/index.ts", "../src/services/bot/contract.ts", "../src/config/rpc.ts", "../src/services/contract.ts", "../src/services/idl/deltabot.ts", "../src/config/bot.ts", "../src/lib/vaultList.ts", "../src/lib/userAssets.ts", "../src/lib/market.ts", "../src/lib/referral.ts", "../src/lib/vault/dca.ts", "../src/lib/vault/index.ts", "../src/lib/vault/grid.ts", "../src/lib/vault/swing.ts", "../src/lib/index.ts"],
  "sourcesContent": ["import { SDKParams } from '@/lib';\n\ninterface GlobalStateType extends SDKParams {}\n\nclass GlobalState {\n  private static instance: GlobalState;\n  private state: GlobalStateType = {\n    chain: 'near',\n    network: 'mainnet',\n  };\n\n  private constructor() {}\n\n  public static getInstance(): GlobalState {\n    if (!GlobalState.instance) {\n      GlobalState.instance = new GlobalState();\n    }\n    return GlobalState.instance;\n  }\n\n  public set<K extends keyof GlobalStateType>(key: K, value: GlobalStateType[K]): void {\n    this.state[key] = value;\n  }\n\n  public get<K extends keyof GlobalStateType>(key: K): GlobalStateType[K] {\n    return this.state[key];\n  }\n\n  public remove<K extends keyof GlobalStateType>(key: K): void {\n    delete this.state[key];\n  }\n}\n\nexport const globalState = GlobalState.getInstance();\n", "import Big from 'big.js';\nimport dayjs from '@/utils/dayjs';\nimport { TOKENS } from '@/config';\nimport { generateUrl } from './common';\nimport { globalState } from '@/stores';\n\nBig.DP = 40;\nBig.PE = 24;\n\nexport function formatTimestamp(timestamp: string | number | Date, template?: string) {\n  if (!dayjs(timestamp).isValid()) return '';\n  return dayjs(timestamp).format(template || 'YYYY/MM/DD HH:mm');\n}\n\nexport function formatDuration(timestamp: number) {\n  if (!dayjs(timestamp).isValid()) return '';\n  const formattedDuration = dayjs.duration(timestamp);\n  const days = Math.floor(formattedDuration.asDays());\n  const hours = Math.floor(formattedDuration.asHours() % 24);\n  const minutes = formattedDuration.minutes();\n  const formattedDays = days ? `${days}d` : '';\n  const formattedHours = hours ? `${hours}h` : '';\n  const formattedMinutes = minutes ? `${minutes}m` : '';\n  if (formattedDays || formattedHours || formattedMinutes)\n    return [formattedDays, formattedHours, formattedMinutes].filter(Boolean).join(' ');\n  else return '1m';\n}\n\nexport function formatDurationHumanize(timestamp: number) {\n  if (timestamp < 3600000) {\n    const minutes = new Big(timestamp / 60000).round(2).toNumber();\n    return `${minutes} minute${minutes > 1 ? 's' : ''}`;\n  } else if (timestamp < 86400000) {\n    const hours = new Big(timestamp / 3600000).round(2).toNumber();\n    return `${hours} hour${hours > 1 ? 's' : ''}`;\n  } else {\n    const days = new Big(timestamp / 86400000).round(2).toNumber();\n    return `${days} day${Number(days) > 1 ? 's' : ''}`;\n  }\n}\n\nexport function formatSortAddress(address: string | undefined) {\n  if (!address) return '';\n\n  const domainSuffixes = ['.near', '.testnet', '.betanet', '.mainnet'];\n  const maxLength = 12;\n\n  const suffix = domainSuffixes.find((suffix) => address.endsWith(suffix));\n  const isLongAddress = address.length > maxLength;\n\n  if (suffix) {\n    if (isLongAddress) {\n      const visiblePartLength = maxLength - suffix.length - 10;\n      if (visiblePartLength > 0) {\n        return `${address.slice(0, 6)}...${address.slice(\n          -4 - suffix.length,\n          -suffix.length,\n        )}${suffix}`;\n      } else {\n        return `${address.slice(0, 6)}...${address.slice(-4)}`;\n      }\n    } else {\n      return address;\n    }\n  } else {\n    return isLongAddress ? `${address.slice(0, 6)}...${address.slice(-4)}` : address;\n  }\n}\n\nexport function formatAmount(amount: string | number | undefined, decimals = 24) {\n  if (!amount) return '';\n  try {\n    const n = new Big(amount).div(Big(10).pow(decimals)).toFixed();\n    return n;\n  } catch (error) {\n    return '';\n  }\n}\n\nexport function parseAmount(amount: string | number | undefined, decimals = 24) {\n  if (!amount) return '';\n  try {\n    return new Big(amount).times(Big(10).pow(decimals)).toFixed(0, Big.roundDown);\n  } catch (error) {\n    return '';\n  }\n}\n\nexport function formatNumber(val: string | number | undefined, options?: Intl.NumberFormatOptions) {\n  if (val === undefined) return '';\n  return new Intl.NumberFormat('en-US', options).format(Number(val));\n}\n\nexport function parseDisplayAmount(\n  val: string | number | undefined,\n  symbol: string,\n  options?: { rm?: Big.RoundingMode },\n) {\n  const result = formatNumberBySymbol(val, symbol, { rm: options?.rm, displayMinimum: false });\n  if (!result) return '0';\n  return result.replace(/^[^-0-9.]+|[^-0-9.]/g, '');\n}\nexport function parseDisplayPrice(\n  val: string | number | undefined,\n  symbol: string,\n  options?: { rm?: Big.RoundingMode },\n) {\n  const result = formatUSDPrice(val, { symbol, showSign: false, rm: options?.rm });\n  if (!result) return '0';\n  return result.replace(/^[^-0-9.]+|[^-0-9.]/g, '');\n}\n\nexport function formatNumberBySymbol(\n  val: string | number | undefined,\n  symbol: string,\n  options?: {\n    rm?: Big.RoundingMode;\n    displayMinimum?: boolean;\n  },\n) {\n  if (!val || !Number(val)) return '0';\n\n  const tokenConfig = TOKENS[symbol] || {};\n  const decimals = tokenConfig.amountDecimals ?? 2;\n  const min = new Big(10).pow(-decimals);\n  const bigVal = new Big(val);\n  const { rm = Big.roundHalfUp, displayMinimum = true } = options || {};\n  const roundedVal = bigVal.round(decimals, rm);\n\n  if (displayMinimum && roundedVal.abs().lt(min)) {\n    const formattedMin = new Intl.NumberFormat('en-US', {\n      style: 'decimal',\n      maximumFractionDigits: decimals,\n    }).format(min.toNumber());\n\n    return `< ${roundedVal.lt(0) ? '-' : ''}${formattedMin}`;\n  }\n\n  const formattedValue = new Intl.NumberFormat('en-US', {\n    style: 'decimal',\n    maximumFractionDigits: decimals,\n  }).format(roundedVal.toNumber());\n\n  return formattedValue;\n}\n\nexport function formatUSDPrice(\n  val: string | number | undefined,\n  options?: {\n    symbol?: string;\n    showSign?: boolean;\n    decimals?: number;\n    rm?: Big.RoundingMode;\n  } & Intl.NumberFormatOptions,\n) {\n  const sign = options?.showSign ? '$' : '';\n  if (!val || !Number(val)) return sign + '0';\n\n  const decimals =\n    options?.decimals ??\n    (new Big(val).abs().lt(1) ? (options?.symbol ? TOKENS[options.symbol]?.priceDecimals : 2) : 2);\n  const min = new Big(10).pow(-(decimals ?? 2));\n  const bigVal = new Big(val);\n  if (bigVal.abs().lt(min)) return `< ${bigVal.lt(0) ? '-' : ''}${sign}${min}`;\n  return new Intl.NumberFormat('en-US', {\n    style: options?.showSign ? 'currency' : 'decimal',\n    currency: 'USD',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: decimals,\n    ...options,\n  }).format(bigVal.round(decimals, options?.rm ?? Big.roundHalfUp).toNumber());\n}\n\nexport function formatPercent(\n  val: string | number | undefined,\n  options?: {\n    precision?: number;\n    showPlus?: boolean;\n    decimals?: number;\n    rm?: Big.RoundingMode;\n    displayMinimum?: boolean;\n  },\n) {\n  const _val = isNaN(Number(val)) ? 0 : Number(val);\n  const symbol = options?.showPlus && _val > 0 ? '+' : '';\n  const value = new Big(_val)\n    .times(10 ** (options?.decimals || 0))\n    .round(options?.precision ?? 2, options?.rm);\n  if (options?.displayMinimum && value.abs().gt(0) && value.abs().lt(1)) {\n    return `< ${value.lt(0) ? '-' : ''}1%`;\n  }\n  return symbol + value.toString() + '%';\n}\n\nexport function formatExplorerUrl(\n  val: string,\n  type: 'account' | 'transaction' = 'transaction',\n  chain = globalState.get('chain'),\n) {\n  switch (chain) {\n    case 'near':\n      return (\n        (globalState.get('network') === 'mainnet'\n          ? 'https://nearblocks.io'\n          : 'https://testnet.nearblocks.io') + `/${type === 'account' ? 'address' : 'txns'}/${val}`\n      );\n    case 'solana':\n      return generateUrl(\n        `https://explorer.solana.com/${type === 'account' ? 'address' : 'tx'}/${val}`,\n        { cluster: globalState.get('network') === 'testnet' ? 'devnet' : 'mainnet-beta' },\n      );\n  }\n}\n\nexport function formatFileUrl(key: string) {\n  return `https://assets.deltatrade.ai/assets${key}`;\n}\n", "import dayjs from 'dayjs';\nimport 'dayjs/locale/en';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport duration from 'dayjs/plugin/duration';\nimport utc from 'dayjs/plugin/utc';\nimport isBetween from 'dayjs/plugin/isBetween';\nimport isSameOrAfter from 'dayjs/plugin/isSameOrAfter';\nimport isSameOrBefore from 'dayjs/plugin/isSameOrBefore';\nimport isoWeek from 'dayjs/plugin/isoWeek';\n\ndayjs.locale('en');\ndayjs.extend(relativeTime);\ndayjs.extend(duration);\ndayjs.extend(utc);\ndayjs.extend(isBetween);\ndayjs.extend(isoWeek);\n\ndayjs.extend(isSameOrAfter);\ndayjs.extend(isSameOrBefore);\n\nexport default dayjs;\n", "export function safeJSONParse<T>(str: string): T | undefined {\n  try {\n    return JSON.parse(str) as T;\n  } catch (e) {\n    console.error('safeJSONParse', e);\n    return undefined;\n  }\n}\n\nexport function safeJSONStringify(obj: any): string | undefined {\n  try {\n    return JSON.stringify(obj);\n  } catch (e) {\n    console.error('safeJSONStringify', e);\n    return undefined;\n  }\n}\n\nexport function storageStore(namespace?: string, options?: { storage?: Storage }) {\n  if (typeof window === 'undefined') return;\n  const _namespace = namespace || 'default';\n  const storage = options?.storage || window?.localStorage;\n  const namespaceKey = (key: string) => {\n    return _namespace + ':' + key;\n  };\n  return {\n    set(key: string, value: any) {\n      const _value = safeJSONStringify(value);\n      _value ? storage.setItem(namespaceKey(key), _value) : storage.removeItem(namespaceKey(key));\n    },\n    get<T>(key: string) {\n      const _value = storage.getItem(namespaceKey(key));\n      return _value ? safeJSONParse<T>(_value) : undefined;\n    },\n    remove(key: string) {\n      storage.removeItem(namespaceKey(key));\n    },\n    clearAll: function clearAll() {\n      for (const key in storage) {\n        if (key.startsWith(namespace + ':')) {\n          storage.removeItem(key);\n        }\n      }\n    },\n  };\n}\n\nexport function sleep(ms?: number) {\n  return new Promise((resolve) => setTimeout(resolve, ms ?? 0));\n}\n\nexport function generateUrl(\n  url = '',\n  query: Record<string, any>,\n  hashes: Record<string, any> = {},\n) {\n  const queryStringParts = [];\n  for (const key in query) {\n    const value = query[key];\n    if ([undefined, null, ''].includes(value)) continue;\n    if (Array.isArray(value)) {\n      value.forEach((_value) => {\n        queryStringParts.push(encodeURIComponent(key) + '[]=' + encodeURIComponent(_value));\n      });\n    } else {\n      queryStringParts.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\n    }\n  }\n  const queryString = queryStringParts.join('&');\n  if (queryString) {\n    url += url.includes('?') ? '&' : '?';\n    url += queryString;\n  }\n\n  const hashStringParts = [];\n  for (const key in hashes) {\n    const value = hashes[key];\n    if ([undefined, null, ''].includes(value)) continue;\n    hashStringParts.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\n  }\n  const hashString = hashStringParts.join('&');\n  if (hashString) {\n    url += '#' + hashString;\n  }\n\n  return url;\n}\n\nexport const getUrlQuery = (url?: string) => {\n  try {\n    const search = url\n      ? url.split('?')[1]?.split('#')[0]\n      : window.location.search.substring(1).split('#')[0];\n    const urlSearchParams = new URLSearchParams(search);\n    const entries = urlSearchParams.entries();\n    const query = {} as Record<string, any>;\n    for (const [key, value] of entries) {\n      if (query[key]) {\n        query[key] = Array.isArray(query[key])\n          ? [...(query[key] as string[]), value]\n          : [query[key], value];\n      } else {\n        query[key] = value;\n      }\n    }\n    return query;\n  } catch (error) {\n    return {};\n  }\n};\n\nexport const getUrlHash = (\n  url: string = window.location.href,\n): Record<string, string | string[]> => {\n  const { hash } = new URL(url.endsWith('&') ? url.slice(0, -1) : url);\n\n  if (!hash) return {};\n\n  const hashParams = new URLSearchParams(hash.slice(1));\n  const hashes: Record<string, string | string[]> = {};\n\n  hashParams.forEach((value, key) => {\n    hashes[key] = key in hashes ? [...hashes[key], value] : value;\n  });\n\n  return hashes;\n};\n\nexport const isTruncated = (el: HTMLElement) => {\n  if (!el) return false;\n  if (el.scrollHeight > el.clientHeight) return true;\n\n  const textContent = el;\n  const targetW = textContent.getBoundingClientRect().width ?? 0;\n  const range = document.createRange();\n  range.setStart(textContent, 0);\n  range.setEnd(textContent, textContent.childNodes.length);\n  const rangeWidth = range.getBoundingClientRect().width;\n  return rangeWidth > targetW;\n};\n\nexport const loadAsyncScript = (src: string, type?: 'script' | 'link') => {\n  return new Promise((resolve, reject) => {\n    let script: HTMLLinkElement | HTMLScriptElement;\n    if (type === 'link') {\n      script = document.createElement('link');\n      script.setAttribute('rel', 'stylesheet');\n      script.setAttribute('type', 'text/css');\n      script.setAttribute('href', src);\n    } else {\n      script = document.createElement('script');\n      script.setAttribute('src', src);\n    }\n    document.head.appendChild(script);\n    script.onload = resolve;\n    script.onerror = reject;\n  });\n};\n", "import { globalState } from '@/stores';\nimport { formatFileUrl } from '@/utils/format';\n\nexport const CHAINS: Chain[] = ['near', 'solana'];\nexport const CHAIN_NAMES: Record<Chain, string> = {\n  near: 'Near',\n  solana: 'Solana',\n};\n\nexport const CONFIG_MAP = {\n  mainnet: {\n    nearGridContract: 'grid.deltatrade.near',\n    nearDCAContract: 'dca.deltatrade.near',\n    nearGachaponContract: 'deltagachapon.near',\n    apiHost: 'https://api.deltatrade.ai',\n\n    solanaGridContract: 'CNLGhYQgNwjyDfHZTEjHfk1MPkqwP96qZahWN82UfcLM',\n    solanaGridBotState: 'FRcbUFpGHQppvXAyJrNYLKME1BQfowh4xKZB2vt9j6yn',\n    solanaApiHost: 'https://solapi.deltatrade.ai',\n\n    indexerHost: 'https://indexer.ref.finance',\n    nearBlocksApiHost: 'https://api.nearblocks.io',\n  },\n  testnet: {\n    nearGridContract: 'deltabotsdev.testnet',\n    nearDCAContract: 'deltadca.testnet',\n    nearGachaponContract: 'gachapons.testnet',\n    apiHost: 'https://api-dev.delta.bot',\n\n    solanaGridContract: 'CNLGhYQgNwjyDfHZTEjHfk1MPkqwP96qZahWN82UfcLM',\n    solanaGridBotState: '5o5q6XjaZJRyrsnXcfPnD5ninRnwmDiD4kC1bAFqVY1t',\n    solanaApiHost: 'https://sol.api.dev.delta.bot',\n\n    indexerHost: 'https://indexer.ref.finance',\n    nearBlocksApiHost: 'https://api-testnet.nearblocks.io',\n  },\n};\n\nexport function getConfigs(network = globalState.get('network')) {\n  return CONFIG_MAP[network];\n}\n\nexport const TOKENS: Record<string, Token.TokenMeta> = {\n  NEAR: {\n    symbol: 'NEAR',\n    decimals: 24,\n    SolanaDecimals: 9,\n    amountDecimals: 2,\n    priceDecimals: 2,\n    icon: formatFileUrl('/crypto/near.svg'),\n    addresses: {\n      near: { mainnet: 'wrap.near', testnet: 'wrap.testnet' },\n      solana: {\n        mainnet: 'BYPsjxa3YuZESQz1dKuBw1QSFCSpecsm8nCQhY5xbU1Z',\n      },\n    },\n  },\n  Near: {\n    symbol: 'Near',\n    decimals: 24,\n    SolanaDecimals: 6,\n    amountDecimals: 2,\n    priceDecimals: 2,\n    icon: formatFileUrl('/crypto/near.svg'),\n    addresses: {\n      near: { mainnet: '', testnet: 'deltanear.testnet' },\n    },\n  },\n  WETH: {\n    symbol: 'WETH',\n    decimals: 18,\n    SolanaDecimals: 8,\n    amountDecimals: 5,\n    priceDecimals: 2,\n    icon: formatFileUrl('/crypto/weth.png'),\n    addresses: {\n      near: {\n        mainnet: 'aurora',\n        testnet: 'deltaeth.testnet',\n      },\n\n      solana: {\n        mainnet: '7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs',\n        testnet: 'GgE6LjokCiAXXVn2rMTwuc7ko76GJ28X8gtgtrNj9mTh',\n      },\n    },\n  },\n  ETH: {\n    symbol: 'ETH',\n    decimals: 18,\n    SolanaDecimals: 8,\n    amountDecimals: 5,\n    priceDecimals: 2,\n    icon: formatFileUrl('/crypto/eth.svg'),\n    addresses: {\n      near: {\n        mainnet: 'aurora',\n        testnet: 'deltaeth.testnet',\n      },\n\n      solana: {\n        mainnet: '7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs',\n        testnet: 'GgE6LjokCiAXXVn2rMTwuc7ko76GJ28X8gtgtrNj9mTh',\n      },\n    },\n  },\n  ['USDT.e']: {\n    symbol: 'USDT.e',\n    decimals: 6,\n    amountDecimals: 2,\n    priceDecimals: 2,\n    icon: formatFileUrl('/crypto/usdt.e.svg'),\n    addresses: {\n      near: {\n        mainnet: 'dac17f958d2ee523a2206206994597c13d831ec7.factory.bridge.near',\n        testnet: 'usdt.fakes.testnet',\n      },\n    },\n  },\n  USDt: {\n    symbol: 'USDt',\n    decimals: 6,\n    SolanaDecimals: 6,\n    amountDecimals: 2,\n    priceDecimals: 2,\n    icon: formatFileUrl('/crypto/usdt.svg'),\n    addresses: {\n      near: { mainnet: 'usdt.tether-token.near', testnet: 'usdtt.fakes.testnet' },\n\n      solana: { mainnet: 'Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB', testnet: '' },\n    },\n  },\n  ['USDC.e']: {\n    symbol: 'USDC.e',\n    decimals: 6,\n    amountDecimals: 2,\n    priceDecimals: 4,\n    icon: formatFileUrl('/crypto/usdc.e.svg'),\n    addresses: {\n      near: {\n        mainnet: 'a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48.factory.bridge.near',\n        testnet: 'deltausdc.testnet',\n      },\n    },\n  },\n  USDC: {\n    symbol: 'USDC',\n    decimals: 6,\n    amountDecimals: 2,\n    priceDecimals: 4,\n    icon: formatFileUrl('/crypto/usdc.svg'),\n    addresses: {\n      near: {\n        mainnet: '17208628f84f5d6ad33f0da3bbbeb27ffcb398eac501a31bd6ad2011e36133a1',\n        testnet: 'deltausdc.testnet',\n      },\n\n      solana: {\n        mainnet: 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',\n        testnet: '4daMLQAi8PhHQizRXyJPdvURJ6yYMYfBXFDT4LAMJG1L',\n      },\n    },\n  },\n  WBTC: {\n    symbol: 'WBTC',\n    decimals: 8,\n    SolanaDecimals: 8,\n    amountDecimals: 6,\n    priceDecimals: 2,\n    icon: formatFileUrl('/crypto/wbtc.svg'),\n    addresses: {\n      near: {\n        mainnet: '2260fac5e5542a773aa44fbcfedf7c193bc2c599.factory.bridge.near',\n        testnet: 'deltabtc.testnet',\n      },\n\n      solana: { mainnet: '3NZ9JMVBmGAqocybic2c7LQCJScmgsAZ6vQqTDzcqmJh', testnet: '' },\n    },\n  },\n  REF: {\n    symbol: 'REF',\n    decimals: 18,\n    amountDecimals: 2,\n    priceDecimals: 4,\n    icon: formatFileUrl('/crypto/ref.svg'),\n    addresses: {\n      near: { mainnet: 'token.v2.ref-finance.near', testnet: 'ref.fakes.testnet' },\n    },\n  },\n  BRRR: {\n    symbol: 'BRRR',\n    decimals: 18,\n    amountDecimals: 2,\n    priceDecimals: 6,\n    icon: formatFileUrl('/crypto/BURROW.png'),\n    addresses: {\n      near: { mainnet: 'token.burrow.near', testnet: '' },\n    },\n  },\n  LONK: {\n    symbol: 'LONK',\n    decimals: 8,\n    amountDecimals: 2,\n    priceDecimals: 8,\n    icon: formatFileUrl('/crypto/LONK.png'),\n    addresses: {\n      near: { mainnet: 'token.lonkingnearbackto2024.near', testnet: 'deltalonk.testnet' },\n    },\n  },\n  DGS: {\n    symbol: 'DGS',\n    decimals: 18,\n    amountDecimals: 2,\n    priceDecimals: 8,\n    icon: formatFileUrl('/crypto/DGS.svg'),\n    addresses: {\n      near: { mainnet: 'dragonsoultoken.near', testnet: 'dragonsoultoken.testnet' },\n    },\n  },\n  BLACKDRAGON: {\n    symbol: 'BLACKDRAGON',\n    decimals: 24,\n    amountDecimals: 2,\n    priceDecimals: 12,\n    icon: formatFileUrl('/crypto/blackdragon.jpeg'),\n    addresses: {\n      near: { mainnet: 'blackdragon.tkn.near', testnet: '' },\n    },\n  },\n  SHITZU: {\n    symbol: 'SHITZU',\n    decimals: 18,\n    amountDecimals: 2,\n    priceDecimals: 8,\n    icon: formatFileUrl('/crypto/SHITZU.webp'),\n    addresses: {\n      near: { mainnet: 'token.0xshitzu.near', testnet: '' },\n    },\n  },\n  NEKO: {\n    symbol: 'NEKO',\n    decimals: 24,\n    amountDecimals: 2,\n    priceDecimals: 8,\n    icon: formatFileUrl('/crypto/NEKO.svg'),\n    addresses: {\n      near: { mainnet: 'ftv2.nekotoken.near', testnet: '' },\n    },\n  },\n  NEARVIDIA: {\n    symbol: 'NEARVIDIA',\n    decimals: 8,\n    amountDecimals: 2,\n    priceDecimals: 12,\n    icon: formatFileUrl('/crypto/NEARVIDIA.png'),\n    addresses: {\n      near: { mainnet: 'nearnvidia.near', testnet: '' },\n    },\n  },\n  GEAR: {\n    symbol: 'GEAR',\n    decimals: 18,\n    amountDecimals: 4,\n    priceDecimals: 4,\n    icon: formatFileUrl('/crypto/GEAR.png'),\n    addresses: {\n      near: { mainnet: 'gear.enleap.near', testnet: '' },\n    },\n  },\n  BEAN: {\n    symbol: 'BEAN',\n    decimals: 18,\n    amountDecimals: 2,\n    priceDecimals: 12,\n    icon: formatFileUrl('/crypto/BEAN.jpeg'),\n    addresses: {\n      near: { mainnet: 'bean.tkn.near', testnet: '' },\n    },\n  },\n  SLUSH: {\n    symbol: 'SLUSH',\n    decimals: 18,\n    amountDecimals: 2,\n    priceDecimals: 12,\n    icon: formatFileUrl('/crypto/SLUSH.jpeg'),\n    addresses: {\n      near: { mainnet: 'slush.tkn.near', testnet: '' },\n    },\n  },\n  marmaj: {\n    symbol: 'marmaj',\n    decimals: 18,\n    amountDecimals: 4,\n    priceDecimals: 6,\n    icon: formatFileUrl('/crypto/marmaj.png'),\n    addresses: {\n      near: { mainnet: 'marmaj.tkn.near', testnet: '' },\n    },\n  },\n  FAST: {\n    symbol: 'FAST',\n    decimals: 24,\n    amountDecimals: 2,\n    priceDecimals: 4,\n    icon: formatFileUrl('/crypto/FAST.png'),\n    addresses: {\n      near: { mainnet: 'edge-fast.near', testnet: '' },\n    },\n  },\n  HAT: {\n    symbol: 'HAT',\n    decimals: 18,\n    amountDecimals: 2,\n    priceDecimals: 8,\n    icon: formatFileUrl('/crypto/HAT.jpeg'),\n    addresses: {\n      near: { mainnet: 'hat.tkn.near', testnet: '' },\n    },\n  },\n  LNR: {\n    symbol: 'LNR',\n    decimals: 18,\n    amountDecimals: 2,\n    priceDecimals: 4,\n    icon: formatFileUrl('/crypto/LNR.png'),\n    addresses: {\n      near: {\n        mainnet: '802d89b6e511b335f05024a65161bce7efc3f311.factory.bridge.near',\n        testnet: '',\n      },\n    },\n  },\n  CHILL: {\n    symbol: 'CHILL',\n    decimals: 18,\n    amountDecimals: 2,\n    priceDecimals: 6,\n    icon: formatFileUrl('/crypto/CHILL.png'),\n    addresses: {\n      near: { mainnet: 'chill-129.meme-cooking.near', testnet: '' },\n    },\n  },\n  mpDAO: {\n    symbol: 'mpDAO',\n    decimals: 6,\n    amountDecimals: 2,\n    priceDecimals: 4,\n    icon: formatFileUrl('/crypto/mpDAO.svg'),\n    addresses: {\n      near: { mainnet: 'mpdao-token.near', testnet: '' },\n    },\n  },\n  SOL: {\n    symbol: 'SOL',\n    decimals: 9,\n    SolanaDecimals: 9,\n    amountDecimals: 4,\n    priceDecimals: 2,\n    icon: formatFileUrl('/crypto/SOL.svg'),\n    addresses: {\n      near: { mainnet: '22.contract.portalbridge.near' },\n      solana: {\n        mainnet: 'So11111111111111111111111111111111111111112',\n        testnet: 'So11111111111111111111111111111111111111112',\n      },\n    },\n  },\n  JUP: {\n    symbol: 'JUP',\n    decimals: 6,\n    SolanaDecimals: 6,\n    amountDecimals: 2,\n    priceDecimals: 4,\n    icon: formatFileUrl('/crypto/jup.png'),\n    addresses: {\n      solana: { mainnet: 'JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN' },\n    },\n  },\n  RAY: {\n    symbol: 'RAY',\n    decimals: 6,\n    SolanaDecimals: 6,\n    amountDecimals: 2,\n    priceDecimals: 4,\n    icon: formatFileUrl('/crypto/ray.png'),\n    addresses: {\n      solana: { mainnet: '4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R' },\n    },\n  },\n  Bonk: {\n    symbol: 'Bonk',\n    decimals: 5,\n    SolanaDecimals: 5,\n    amountDecimals: 2,\n    priceDecimals: 8,\n    icon: formatFileUrl('/crypto/bonk.jpg'),\n    addresses: {\n      solana: { mainnet: 'DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263' },\n    },\n  },\n  Moutai: {\n    symbol: 'Moutai',\n    decimals: 6,\n    SolanaDecimals: 6,\n    amountDecimals: 2,\n    priceDecimals: 6,\n    icon: formatFileUrl('/crypto/moutai.jpg'),\n    addresses: {\n      solana: { mainnet: '45EgCwcPXYagBC7KqBin4nCFgEZWN7f3Y6nACwxqMCWX' },\n    },\n  },\n  $WIF: {\n    symbol: '$WIF',\n    decimals: 6,\n    SolanaDecimals: 6,\n    amountDecimals: 2,\n    priceDecimals: 4,\n    icon: formatFileUrl('/crypto/$wif.jpg'),\n    addresses: {\n      solana: { mainnet: 'EKpQGSJtjMFqKZ9KQanSqYXRcF8fBopzLHYxdM65zcjm' },\n    },\n  },\n  mSOL: {\n    symbol: 'mSOL',\n    decimals: 9,\n    SolanaDecimals: 9,\n    amountDecimals: 4,\n    priceDecimals: 2,\n    icon: formatFileUrl('/crypto/msol.png'),\n    addresses: {\n      solana: { mainnet: 'mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So' },\n    },\n  },\n  ORCA: {\n    symbol: 'ORCA',\n    decimals: 6,\n    SolanaDecimals: 6,\n    amountDecimals: 2,\n    priceDecimals: 4,\n    icon: formatFileUrl('/crypto/orca.png'),\n    addresses: {\n      solana: { mainnet: 'orcaEKTdK7LKz57vaAYr9QeNsVEPfiu6QeMU1kektZE' },\n    },\n  },\n  KMNO: {\n    symbol: 'KMNO',\n    decimals: 6,\n    SolanaDecimals: 6,\n    amountDecimals: 2,\n    priceDecimals: 6,\n    icon: formatFileUrl('/crypto/kmno.svg'),\n    addresses: {\n      solana: { mainnet: 'KMNo3nJsBXfcpJTVhZcXLW7RmTwTt4GVFE7suUBo9sS' },\n    },\n  },\n  CIGGS: {\n    symbol: 'CIGGS',\n    decimals: 9,\n    SolanaDecimals: 9,\n    amountDecimals: 2,\n    priceDecimals: 6,\n    icon: formatFileUrl('/crypto/ciggs.png'),\n    addresses: {\n      solana: { mainnet: '7p6RjGNZ7HLHpfTo6nh21XYw4CZgxXLQPzKXG72pNd2y' },\n    },\n  },\n  BUTT: {\n    symbol: 'BUTT',\n    decimals: 6,\n    SolanaDecimals: 6,\n    amountDecimals: 2,\n    priceDecimals: 6,\n    icon: formatFileUrl('/crypto/butt.jpeg'),\n    addresses: {\n      solana: { mainnet: '3dCCbYca3jSgRdDiMEeV5e3YKNzsZAp3ZVfzUsbb4be4' },\n    },\n  },\n};\n\nexport const ExternalUrls = {\n  docs: 'https://docs.deltatrade.ai/',\n  twitter: 'https://twitter.com/DeltaBotTeam',\n  telegram: 'https://t.me/deltabotchat',\n};\n", "import { TOKENS } from '@/config';\nimport { globalState } from '@/stores';\n\nexport function getTokenMeta(symbol: string) {\n  return TOKENS[symbol];\n}\n\nexport function getTokenAddress(symbol: string, chain?: Chain, network?: NetworkId) {\n  if (typeof window === 'undefined') return;\n  const _chain = chain || globalState.get('chain');\n  const _network = network || globalState.get('network');\n  return TOKENS[symbol]?.addresses?.[_chain]?.[_network];\n}\n\nexport function getTokenByAddress(address: string, chain?: Chain, network?: NetworkId) {\n  if (typeof window === 'undefined') return;\n  if (!address) return;\n  const _chain = chain || globalState.get('chain');\n  const _network = network || globalState.get('network');\n  const res = Object.values(TOKENS).find(\n    (token) => token.addresses?.[_chain]?.[_network] === address,\n  );\n  const decimals = getTokenDecimals(res?.symbol!, chain);\n  return { ...res, decimals } as Token.TokenMeta;\n}\n\nexport function getTokenDecimals(symbol: string, chain?: Chain) {\n  if (typeof window === 'undefined') return;\n  const _chain = chain || globalState.get('chain');\n  const decimalsKey = _chain === 'solana' ? 'SolanaDecimals' : 'decimals';\n  return TOKENS[symbol]?.[decimalsKey] || TOKENS[symbol]?.decimals;\n}\n", "interface RequestOptions<T> extends RequestInit {\n  body?: RequestInit['body'] | any;\n  retryCount?: number;\n  timeout?: number;\n  cacheTimeout?: number;\n  pollingInterval?: number;\n  maxPollingAttempts?: number;\n  shouldStopPolling?: (response: T) => boolean;\n}\n\nconst cache = new Map<string, { timestamp: number; data: any }>();\n\nconst defaultCacheTimeout = 3000;\n\nexport default async function request<T>(url: string, options?: RequestOptions<T>): Promise<T> {\n  const defaultHeaders = {\n    'Content-Type': 'application/json',\n  };\n\n  const cacheTimeout = options?.cacheTimeout || defaultCacheTimeout;\n\n  const headers = {\n    ...defaultHeaders,\n    ...options?.headers,\n  };\n\n  let body = options?.body;\n  if (headers['Content-Type'] === 'application/json' && body && typeof body !== 'string') {\n    body = JSON.stringify(body);\n  }\n\n  const method = options?.method || 'GET';\n  const cacheKey = method.toUpperCase() === 'GET' ? url : null;\n\n  if (cacheKey) {\n    const cached = cache.get(cacheKey);\n    const isCacheValid = cached && Date.now() - cached.timestamp < cacheTimeout;\n    if (isCacheValid) {\n      return Promise.resolve(cached.data as T);\n    }\n  }\n\n  const newOptions: RequestInit = {\n    ...options,\n    headers,\n    body,\n    method,\n  };\n\n  const retryCount = options?.retryCount ?? 1;\n\n  const controller = new AbortController();\n  const timeout = options?.timeout || 20000;\n  const timeoutId = setTimeout(() => controller.abort(), timeout);\n\n  try {\n    const res = await fetch(url, { ...newOptions, signal: controller.signal }).finally(() =>\n      clearTimeout(timeoutId),\n    );\n\n    if (!res.ok) throw new Error(res.statusText);\n    const data = await res.json();\n\n    if (cacheKey) {\n      cache.set(cacheKey, { timestamp: Date.now(), data });\n      setTimeout(() => {\n        cache.delete(cacheKey);\n      }, cacheTimeout);\n    }\n\n    if (options?.shouldStopPolling && options.shouldStopPolling(data)) {\n      return data as T;\n    }\n\n    return data as T;\n  } catch (err) {\n    console.error(err);\n    if (retryCount > 0) {\n      console.log(`Retrying... attempts left: ${retryCount}`);\n      return request(url, { ...options, retryCount: retryCount - 1 });\n    } else if (options?.pollingInterval && options?.maxPollingAttempts) {\n      if (options.maxPollingAttempts > 0) {\n        console.log(`Polling... attempts left: ${options.maxPollingAttempts}`);\n        await new Promise((resolve) => setTimeout(resolve, options.pollingInterval));\n        return request(url, {\n          ...options,\n          maxPollingAttempts: options.maxPollingAttempts - 1,\n          retryCount: retryCount,\n        });\n      }\n    }\n    return Promise.reject(err);\n  }\n}\n", "import { getConfigs } from '@/config';\nimport { globalState } from '@/stores';\n\nexport { default as request } from '@/utils/request';\n\nexport interface WrapperResponse<T> {\n  code: number;\n  data?: T;\n  message?: string;\n}\n\nexport interface PaginationParams {\n  page?: number;\n  pageSize?: number;\n}\n\nexport type PaginationResponse<T> = WrapperResponse<\n  { list?: T[]; has_next_page: boolean } | undefined\n>;\n\nexport const botInnerApiPrefix = (url: string, chain?: Chain) => {\n  const _chain = chain || globalState.get('chain');\n  const host = _chain === 'solana' ? getConfigs().solanaApiHost : getConfigs().apiHost;\n  return host + '/api' + url;\n};\n", "import { getTokenAddress, getTokenByAddress } from '@/utils/token';\nimport { botInnerApiPrefix, request, type WrapperResponse } from '.';\nimport { generateUrl } from '@/utils/common';\nimport { parseDisplayPrice } from '@/utils/format';\nimport { CHAINS, getConfigs } from '@/config';\nimport { globalState } from '@/stores';\n\ninterface PriceReport {\n  contract_address: string;\n  symbol: string;\n  price_list: { date_time: number; price: string }[];\n}\n\nexport interface KlineItem {\n  pair: string;\n  price: string;\n  low: string;\n  high: string;\n  time: number;\n}\n\nexport const pairServices = {\n  pairs: {} as Record<Chain, BotModel.BotPair[]>,\n  async queryAll() {\n    if (CHAINS.every((chain) => this.pairs[chain]?.length)) return this.pairs;\n    const res = await Promise.all(CHAINS.map((chain) => this.query(chain)));\n    return res.reduce(\n      (acc, cur, i) => {\n        acc[CHAINS[i]] = cur;\n        return acc;\n      },\n      {} as Record<Chain, BotModel.BotPair[]>,\n    );\n  },\n  async query(chain = globalState.get('chain')) {\n    if (this.pairs[chain]?.length) return this.pairs[chain];\n    if (this.pairs[chain]?.length) return this.pairs[chain];\n    const { data } = await request<WrapperResponse<BotModel.BotPair[]>>(\n      botInnerApiPrefix('/bot/grid/pairs', chain),\n    ).catch(() => ({ data: [] }));\n    data?.forEach((item) => {\n      item.symbol = `${item.base_token.symbol}_${item.quote_token.symbol}`;\n      item.chain = chain;\n    });\n    this.pairs[chain] = data || [];\n    return data || [];\n  },\n\n  async queryPairPrice(pair_id: string | string[]) {\n    const ids: string[] = Array.isArray(pair_id) ? pair_id : [pair_id];\n    const prices = await this.queryPrice();\n    const result = {} as Record<\n      string,\n      {\n        pair_id: string;\n        basePrice: string;\n        quotePrice: string;\n        pairPrice: string;\n      }\n    >;\n    ids.map((id) => {\n      const [baseToken, quoteToken] = id.split(':');\n      const basePrice = prices?.[baseToken] || '0';\n      const quotePrice = prices?.[quoteToken] || '0';\n      const pairPrice = parseDisplayPrice(\n        Number(basePrice) / Number(quotePrice),\n        getTokenByAddress(baseToken)?.symbol!,\n      );\n      result[id] = { pair_id: id, basePrice, quotePrice, pairPrice };\n    });\n    return result;\n  },\n\n  async queryPrice<T extends string | string[]>(tokens?: T) {\n    const _tokens = Array.isArray(tokens) ? tokens : tokens ? [tokens] : [];\n    const { data } = await request<WrapperResponse<Record<string, string>>>(\n      generateUrl(botInnerApiPrefix('/prices'), {\n        tokens: _tokens?.join(','),\n      }),\n      { cacheTimeout: 10000 },\n    );\n    return data;\n  },\n  tickers: {} as Record<string, BotModel.PairTicker>,\n  async queryTicker(pair_id: string | string[]) {\n    const ids = Array.isArray(pair_id) ? pair_id : [pair_id];\n    const pairPrices = await this.queryPairPrice(ids);\n    const tickers = await Promise.all(\n      ids.map(async (id) => {\n        const { data } = await request<WrapperResponse<BotModel.PairTicker>>(\n          generateUrl(botInnerApiPrefix('/bot/grid/ticker'), { pair_id: id }),\n          { cacheTimeout: 60000 },\n        ).catch(() => ({ data: undefined }));\n        if (!data) return this.tickers[id];\n        const price = pairPrices[id].pairPrice;\n        const newData = {\n          ...data,\n          last_price: price,\n        };\n        this.tickers[id] = newData;\n        return newData;\n      }),\n    );\n    const result = tickers.reduce(\n      (acc, cur) => {\n        acc[cur.pair_id] = cur;\n        return acc;\n      },\n      {} as Record<string, BotModel.PairTicker>,\n    );\n    return result;\n  },\n  async queryPriceByIndexer(symbol: string) {\n    const { price } = await request<{ price: string }>(\n      generateUrl(getConfigs().indexerHost + '/get-token-price', {\n        token_id: getTokenAddress(symbol, 'near', 'mainnet'),\n      }),\n    );\n    return price;\n  },\n\n  async queryPriceReport({\n    base,\n    quote,\n    dimension = 'M',\n  }: {\n    base: string;\n    quote: string;\n    dimension?: 'D' | 'W' | 'M' | 'Y';\n  }) {\n    const { price_list } = await request<PriceReport>(\n      generateUrl(getConfigs().indexerHost + '/token-price-report', {\n        token: getTokenAddress(base, 'near', 'mainnet'),\n        base_token: getTokenAddress(quote, 'near', 'mainnet'),\n        dimension,\n      }),\n      { retryCount: 0 },\n    );\n    const res = price_list.map(({ date_time, price }) => ({\n      name: date_time,\n      value: Number(price),\n    }));\n    return res;\n  },\n  async queryHistoryPriceReport({ base, quote }: { base: string; quote: string }) {\n    const { price_list } = await request<PriceReport>(\n      generateUrl(getConfigs().indexerHost + '/history-token-price-report', {\n        token: getTokenAddress(base, 'near', 'mainnet'),\n        base_token: getTokenAddress(quote, 'near', 'mainnet'),\n      }),\n      { retryCount: 0 },\n    );\n    const res = price_list.map(({ date_time, price }) => ({\n      name: date_time,\n      value: Number(price),\n    }));\n    return res;\n  },\n};\n", "import { pairServices } from '@/services/token';\nimport { globalState } from '@/stores';\n\nconst filterPairs = (pairs: BotModel.BotPair[], type?: BotModel.BotType) => {\n  if (!type) return pairs;\n  return pairs.filter(\n    (pair) =>\n      (type === 'dca' && pair.support_dca) ||\n      (['grid', 'swing'].includes(type) && pair.support_grid),\n  );\n};\n\nexport async function getPairs(params?: { type?: BotModel.BotType }) {\n  const chain = globalState.get('chain');\n  const pairs = await pairServices.query(chain);\n  return filterPairs(pairs, params?.type);\n}\n\nexport async function getPairPrices(pairId: string[]) {\n  const res = await pairServices.queryPairPrice(pairId);\n  return res;\n}\n", "import { generateUrl } from '@/utils/common';\nimport {\n  type PaginationParams,\n  request,\n  type WrapperResponse,\n  type PaginationResponse,\n  botInnerApiPrefix,\n} from '../';\nimport { formatAmount, formatDurationHumanize, parseDisplayPrice } from '@/utils/format';\nimport Big from 'big.js';\n\nimport { getTokenByAddress } from '@/utils/token';\nimport dayjs from '@/utils/dayjs';\nimport { DCA_PRICE_DECIMALS } from './contract';\nimport { globalState } from '@/stores';\n\ninterface BotSummary {\n  average_apy: string;\n  profit_24: string;\n  profit_30: string;\n  top_apy: string;\n  total_investment: string;\n  total_arbitrage_profit: string;\n  current_arbitrage_profit: string;\n  current_investment: string;\n}\nexport type BotQueryParams<T extends BotModel.BotType = BotModel.BotType> = PaginationParams & {\n  bot_type?: T;\n  account_id?: string;\n  status?: 'position' | 'history';\n  pair_id?: string;\n  order_by?: string;\n  dir?: 'asc' | 'desc';\n};\nexport const botServices = {\n  async querySummary() {\n    const accountId = globalState.get('accountId');\n    const { data } = await request<WrapperResponse<BotSummary>>(\n      generateUrl(botInnerApiPrefix('/user/bot/summary'), {\n        account_id: accountId,\n      }),\n    );\n    return data;\n  },\n  async query<T extends BotModel.BotType = BotModel.BotType>(\n    type: T,\n    params: BotQueryParams<T>,\n  ): Promise<PaginationResponse<BotModel.MarketBot<T>>['data'] | undefined> {\n    switch (type) {\n      case 'dca':\n        return dcaBotServices.query(params as BotQueryParams<'dca'>) as any;\n      default:\n        return gridBotServices.query(params) as any;\n    }\n  },\n\n  async queryDetail<T extends BotModel.BotType = BotModel.BotType>(\n    type: T,\n    bot_id: number | string,\n    chain?: Chain,\n  ): Promise<BotModel.Bot<T> | undefined> {\n    switch (type) {\n      case 'dca':\n        return dcaBotServices.queryDetail(bot_id as string, type, chain) as any;\n      default:\n        return gridBotServices.queryDetail(bot_id as number, type, chain);\n    }\n  },\n};\n\ntype GridBotQueryDetailLogsParams = PaginationParams & { bot_id: number };\nexport const gridBotServices = {\n  async query(params: BotQueryParams) {\n    try {\n      if (!params.account_id) return { list: [], has_next_page: false };\n      const { page = 1, pageSize: limit = 10, status, ...rest } = params;\n      const offset = (page - 1) * limit;\n      let transformedStatus: string | undefined = undefined;\n      if (typeof status === 'string') {\n        transformedStatus = status === 'position' ? 'active,expired' : 'closed';\n      }\n      const transformedParams = this.transformQueryBotParams({\n        limit,\n        offset,\n        status: transformedStatus,\n        ...rest,\n      });\n      const { data } = await request<PaginationResponse<BotModel.MarketBot>>(\n        generateUrl(botInnerApiPrefix('/bots'), transformedParams),\n      );\n      if (data?.list?.length) {\n        data.list = data.list.map((item, index) => ({\n          ...this.transformData(item),\n          index: index + limit * (page - 1) + 1,\n        }));\n      }\n      return data;\n    } catch (error) {\n      return { list: [], has_next_page: false };\n    }\n  },\n\n  async queryDetail<T extends BotModel.BotType = 'grid'>(bot_id: number, type: T, chain?: Chain) {\n    const _type = type === 'swing' ? 'grid' : type;\n    const { data } = await request<WrapperResponse<BotModel.Bot<T> | undefined>>(\n      generateUrl(botInnerApiPrefix('/bot', chain ?? globalState.get('chain')), {\n        bot_id,\n        type: _type,\n      }),\n    );\n    return data ? this.transformData(data, chain) : undefined;\n  },\n  async queryDetailLogs<T extends BotModel.BotDetailRecordType>(\n    params: GridBotQueryDetailLogsParams & { recordType: T },\n  ) {\n    const { recordType, ...rest } = params;\n    switch (recordType) {\n      case 'orders':\n        return gridBotServices.queryOrders(rest);\n      case 'trades':\n        return gridBotServices.queryTrades(rest);\n      case 'claims':\n        return gridBotServices.queryClaims(rest);\n    }\n  },\n  async queryOrders(params: GridBotQueryDetailLogsParams) {\n    const { data } = await request<WrapperResponse<BotModel.GridBotOrder[]>>(\n      generateUrl(botInnerApiPrefix('/bot/grid/orders'), params),\n    );\n    data?.sort((a, b) => Number(b.price) - Number(a.price));\n    const list = data?.reduce((acc, item) => {\n      const rawAmount = item.is_buy\n        ? new Big(item.buy_token.volume).minus(item.buy_filled_volume).toString()\n        : new Big(item.sell_token.volume).minus(item.sell_filled_volume).toString();\n      if (new Big(rawAmount).lte(100)) return acc;\n      const amount = formatAmount(\n        rawAmount,\n        item.is_buy ? item.buy_token.decimals : item.sell_token.decimals,\n      );\n      const total = new Big(item.price).times(amount).toString();\n      acc.push({ ...item, amount, total, index: acc.length + 1 });\n      return acc;\n    }, [] as BotModel.GridBotOrder[]);\n\n    return { list, has_next_page: false };\n  },\n  async queryTrades(params: GridBotQueryDetailLogsParams) {\n    const { bot_id, page = 1, pageSize: limit = 10 } = params;\n    const offset = (page - 1) * limit;\n    const { data } = await request<PaginationResponse<BotModel.GridBotTrade>>(\n      generateUrl(botInnerApiPrefix('/bot/grid/trades'), {\n        bot_id,\n        limit,\n        offset,\n      }),\n    );\n    data?.list?.forEach((item, index) => (item.index = index + limit * (page - 1) + 1));\n    return data;\n  },\n  async queryClaims(params: GridBotQueryDetailLogsParams) {\n    const { bot_id, page = 1, pageSize: limit = 10 } = params;\n    const offset = (page - 1) * limit;\n    const { data } = await request<PaginationResponse<BotModel.GridBotClaim>>(\n      generateUrl(botInnerApiPrefix('/bot/grid/claims'), {\n        bot_id,\n        limit,\n        offset,\n      }),\n    );\n    data?.list?.forEach((item, index) => (item.index = index + limit * (page - 1) + 1));\n    return data;\n  },\n  transformData<T extends BotModel.MarketBot | BotModel.Bot | LeaderBoardModel.LeaderBoard>(\n    data: T,\n    chain?: Chain,\n  ) {\n    if ('type' in data && data?.type === 'grid') {\n      data.type = data.grid_style || data.type;\n    } else if ('bot_type' in data && data.bot_type === 'grid') {\n      data.bot_type = data.bot_grid_style || data.bot_type;\n    }\n    data.chain = (data.chain?.toLowerCase() || chain || globalState.get('chain')) as Chain;\n    if ('base_order_price' in data || 'quote_order_price' in data) {\n      const base = 'base_token' in data ? data.base_token : data.investment_base;\n      const quote = 'quote_token' in data ? data.quote_token : data.investment_quote;\n      const baseAmount = formatAmount(base.volume, base.decimals);\n      const quoteAmount = formatAmount(quote.volume, quote.decimals);\n      data.totalInvestmentUsd = new Big(baseAmount)\n        .times(data.base_order_price || 0)\n        .plus(new Big(quoteAmount).times(data.quote_order_price || 0))\n        .toString();\n    }\n    return data;\n  },\n  transformQueryBotParams(data: { bot_type?: BotModel.BotType; [key: string]: any }) {\n    const newData = { ...data };\n    if (data?.bot_type && ['grid', 'swing'].includes(data?.bot_type)) {\n      newData.bot_type = 'grid';\n      newData.grid_style = data.bot_type;\n    }\n    return newData;\n  },\n};\n\nexport const dcaBotServices = {\n  async query(params: BotQueryParams<'dca'>, all?: boolean) {\n    try {\n      if (!all && !params.account_id) return { list: [], has_next_page: false };\n      const { page = 1, pageSize: limit = 10, status, dir: sort, order_by, ...rest } = params;\n      const offset = (page - 1) * limit;\n      let closed = -1;\n      if (status) {\n        if (['position', 'active'].includes(status)) {\n          closed = 0;\n        }\n        if (['history', 'closed'].includes(status)) {\n          closed = 1;\n        }\n      }\n      const { data } = await request<PaginationResponse<BotModel.MarketBot<'dca'>>>(\n        generateUrl(botInnerApiPrefix('/dca/list'), {\n          limit,\n          offset,\n          closed,\n          order_by: order_by === 'bot_create_time' ? 'time' : order_by,\n          sort,\n          ...rest,\n        }),\n      );\n      if (data?.list?.length) {\n        data.list = data.list.map((item, index) => ({\n          ...this.transformData(item),\n          index: index + limit * (page - 1) + 1,\n        }));\n      }\n      return data;\n    } catch (error) {\n      return { list: [], has_next_page: false };\n    }\n  },\n  async queryDetail(bot_id: string, type = 'dca', chain?: Chain) {\n    const { data } = await request<WrapperResponse<BotModel.Bot<'dca'> | undefined>>(\n      generateUrl(botInnerApiPrefix('/dca/details', chain ?? globalState.get('chain')), {\n        dca_id: bot_id,\n      }),\n    );\n    return data ? this.transformData(data) : undefined;\n  },\n  async queryDetailLogs<T extends BotModel.BotDetailRecordType>(\n    params: PaginationParams & { recordType: T; id: string },\n  ) {\n    const { recordType, ...rest } = params;\n    switch (recordType) {\n      case 'orders':\n        return dcaBotServices.queryOrders(rest);\n      case 'trades':\n        return dcaBotServices.queryTrades(rest);\n      case 'claims':\n        return dcaBotServices.queryClaims(rest);\n    }\n  },\n  async queryOrders(params: PaginationParams & { id: string }) {\n    const bot = await this.queryDetail(params.id);\n    if (bot) {\n      const list = [];\n      for (let i = bot.execute_count; i < bot.count; i++) {\n        const order = {\n          index: i - bot.execute_count + 1,\n          tradeType: bot.tradeType,\n          amount: formatAmount(bot.single_amount_in, bot.tokenIn?.decimals),\n          time: dayjs(bot.start_time)\n            .add(i * Number(bot.interval_time), 'ms')\n            .valueOf(),\n        };\n        list.push(order);\n      }\n      return { list, has_next_page: false };\n    }\n    return { list: [], has_next_page: false };\n  },\n  async queryTrades(params: PaginationParams & { id: string }) {\n    const bot = await this.queryDetail(params.id);\n    if (!bot) return { list: [] };\n    const { page = 1, pageSize: limit = 10, id: dca_id } = params;\n    const offset = (page - 1) * limit;\n    const { data } = await request<\n      PaginationResponse<{\n        index: number;\n        dca_id: string;\n        account_id: string;\n        token: string;\n        volume: string;\n        time: number;\n      }>\n    >(generateUrl(botInnerApiPrefix('/dca/trades'), { dca_id, limit, offset }));\n    const list = (data?.list || []).map((item, index) => {\n      const amountIn = formatAmount(bot.single_amount_in, bot.tokenIn?.decimals);\n      const amountOut = formatAmount(item.volume, bot.tokenOut?.decimals);\n      const amount = bot.tradeType === 'buy' ? amountOut : amountIn;\n      const price =\n        bot.tradeType === 'buy'\n          ? new Big(amountIn).div(amountOut).toString()\n          : new Big(amountOut).div(amountIn).toString();\n      const total = new Big(amount).times(price).round(12).toString();\n      return { ...item, price, total, amount, index: index + limit * (page - 1) + 1 };\n    });\n    return { ...data, list };\n  },\n  async queryClaims(params: PaginationParams & { id: string }) {\n    const { page = 1, pageSize: limit = 10, id: dca_id } = params;\n    const offset = (page - 1) * limit;\n    const { data } = await request<\n      PaginationResponse<{\n        index: number;\n        dca_id: string;\n        account_id: string;\n        token: string;\n        volume: string;\n        tx_hash: string;\n        time: number;\n      }>\n    >(generateUrl(botInnerApiPrefix('/dca/claims'), { dca_id, limit, offset }));\n\n    data?.list?.forEach((item, index) => {\n      item.index = index + limit * (page - 1) + 1;\n    });\n    return data;\n  },\n  async queryMarketData(pair_id: string) {\n    type MarketData = {\n      side: BotModel.TradeType;\n      type: '1' | '7' | '30';\n      pair_id: string;\n      amount: string;\n    };\n    const { data } = await request<WrapperResponse<MarketData[]>>(\n      generateUrl(botInnerApiPrefix('/dca/statistical'), { pair_id }),\n    );\n    //group by side_type\n    const groupData = data?.reduce(\n      (acc, item) => {\n        acc[`${item.side}_${item.type}`] = item;\n        return acc;\n      },\n      {} as Record<string, MarketData>,\n    );\n\n    return groupData;\n  },\n  transformData(bot: BotModel.Bot<'dca'>) {\n    const data = { ...bot };\n    const [base, quote] = data.pair_id.split(':');\n    const lowestPrice = formatAmount(data.lowest_price, DCA_PRICE_DECIMALS);\n    const highestPrice = formatAmount(data.highest_price, DCA_PRICE_DECIMALS);\n    const baseToken = getTokenByAddress(base);\n    const quoteToken = getTokenByAddress(quote);\n    const tokenInMeta = getTokenByAddress(data.token_in);\n    const tokenOutMeta = getTokenByAddress(data.token_out);\n    data.id = data.dca_id;\n    data.bot_id = data.dca_id;\n    data.type = 'dca';\n    data.status = data.closed ? 'closed' : 'active';\n    data.tradeType = data.side;\n    data.bot_create_time = data.dca_create_time;\n    data.frequency = formatDurationHumanize(data.interval_time);\n    data.baseToken = baseToken;\n    data.quoteToken = quoteToken;\n    data.tokenIn = tokenInMeta;\n    data.tokenOut = tokenOutMeta;\n    data.lowest_price =\n      data.side === 'sell'\n        ? lowestPrice\n        : new Big(highestPrice || 0).gt(0)\n          ? parseDisplayPrice(new Big(1).div(highestPrice).toString(), baseToken?.symbol || '')\n          : '0';\n    data.highest_price =\n      data.side === 'sell'\n        ? highestPrice\n        : new Big(lowestPrice || 0).gt(0)\n          ? parseDisplayPrice(new Big(1).div(lowestPrice).toString(), baseToken?.symbol || '')\n          : '0';\n\n    data.investmentAmount = formatAmount(\n      new Big(data.single_amount_in).times(data.count).toString(),\n      tokenInMeta?.decimals,\n    );\n\n    data.filledAmount = new Big(data.investmentAmount)\n      .minus(formatAmount(data.left_amount_in, tokenInMeta?.decimals))\n      .toString();\n\n    data.filledPercent = new Big(data.filledAmount)\n      .div(data.investmentAmount)\n      .times(100)\n      .toString();\n    data.endTime = dayjs(data.start_time)\n      .add(data.interval_time * (data.count - 1), 'ms')\n      .valueOf();\n    return data;\n  },\n};\n\ninterface MarketSummary {\n  arbitrage_profit: string;\n  bots: string;\n  profit_24: string;\n  position: string;\n  total_position: string;\n  total_users: string;\n  total_bots: string;\n}\n\ninterface BotCategory {\n  name: string;\n  description: string;\n  type: BotModel.BotType;\n  logo: string;\n  total_users: number;\n}\n\nexport const marketServices = {\n  async querySummary() {\n    const { data } = await request<WrapperResponse<MarketSummary>>(botInnerApiPrefix('/market'));\n    const { data: volumeData } = await request<\n      WrapperResponse<{ total: string; total_24h: string }>\n    >(botInnerApiPrefix('/home/data'));\n    return { ...data, volume_total: volumeData?.total, volume_24h: volumeData?.total_24h };\n  },\n  async queryBotCategories() {\n    const { data } = await request<WrapperResponse<BotCategory[]>>(\n      botInnerApiPrefix('/market/bots'),\n    );\n    return data?.filter((item) => !(globalState.get('chain') === 'solana' && item.type === 'dca'));\n  },\n  async queryTopBots(params?: { pair_id?: string; type?: BotModel.BotType }) {\n    const { data } = await request<WrapperResponse<BotModel.MarketBot<'grid'>[]>>(\n      generateUrl(botInnerApiPrefix('/market/bots/top24'), {\n        ...params,\n        chain: globalState.get('chain'),\n      }),\n    );\n    if (params?.pair_id) {\n      return data?.filter((item) => item.pair_id === params.pair_id);\n    }\n    return data?.map((v) => gridBotServices.transformData(v));\n  },\n  async queryAllBots<T extends BotModel.BotType = BotModel.BotType>(\n    params?: PaginationParams & {\n      bot_type?: T;\n      order_by?: string;\n      dir?: 'asc' | 'desc';\n      pair_id?: string;\n      account_id?: string;\n    },\n  ) {\n    if (params?.bot_type === 'dca') {\n      return dcaBotServices.query(params as BotQueryParams<'dca'>, true);\n    }\n    const {\n      bot_type,\n      order_by = 'bot_create_time',\n      dir = 'desc',\n      page = 1,\n      pageSize: limit = 10,\n      ...rest\n    } = params || {};\n    const offset = (page - 1) * limit;\n    const transformedParams = gridBotServices.transformQueryBotParams({\n      bot_type,\n      limit,\n      offset,\n      order_by,\n      dir,\n      ...rest,\n    });\n\n    const { data } = await request<PaginationResponse<BotModel.MarketBot>>(\n      generateUrl(\n        botInnerApiPrefix(params?.account_id ? '/bots' : '/market/bots/all'),\n        transformedParams,\n      ),\n    );\n    if (data?.list?.length) {\n      data.list = data.list.map((item, index) => ({\n        ...gridBotServices.transformData(item),\n        index: index + limit * (page - 1) + 1,\n      }));\n    }\n    return data;\n  },\n};\n", "import { formatAmount, parseAmount } from '@/utils/format';\nimport Big from 'big.js';\nimport {\n  nearContractServices,\n  NEAR_TGAS_DECIMALS,\n  NEAR_DECIMALS,\n  type TransactionParams,\n  solanaContractServices,\n} from './../contract';\n\nimport { getTokenAddress, getTokenByAddress, getTokenDecimals } from '@/utils/token';\n\nimport dayjs from '@/utils/dayjs';\nimport * as anchor from '@coral-xyz/anchor';\nimport { PublicKey } from '@solana/web3.js';\nimport { type Deltabot, IDL } from '../idl/deltabot';\nimport {\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  getAssociatedTokenAddress,\n  TOKEN_PROGRAM_ID,\n} from '@solana/spl-token';\nimport { botServices } from '.';\nimport { SOLANA_MIN_DEPOSIT } from '@/config/bot';\nimport { pairServices } from '../token';\nimport { globalState } from '@/stores';\nimport { getConfigs } from '@/config';\n\nexport type BotContractServices<T extends Chain> = T extends 'near'\n  ? typeof botNearContractServices\n  : typeof botSolanaContractServices;\n\nexport type BotContractParams<T extends BotModel.BotType> = (T extends 'dca'\n  ? DCABotContractParams\n  : GridBotContractParams) & {\n  type: T;\n};\nexport interface GridBotContractParams {\n  name: string;\n  pair_id: string;\n  grid_type: BotModel.GridType;\n  grid_buy_count: number;\n  grid_sell_count: number;\n  /** Only for gridType EqOffset */\n  grid_rate?: number;\n  /** Only for gridType EqRate */\n  first_base_amount: string;\n  first_quote_amount: string;\n  last_base_amount: string;\n  last_quote_amount: string;\n  fill_base_or_quote: boolean;\n  trigger_price?: string;\n\n  grid_offset?: string;\n  slippage: number;\n  entry_price: string;\n  total_base_investment: string;\n  total_quote_investment: string;\n  base_token: BotModel.Token;\n  quote_token: BotModel.Token;\n  stop_loss_price?: string;\n  valid_until_time?: string;\n  take_profit_price?: string;\n  recommender?: string;\n}\nexport interface DCABotContractParams {\n  name: string;\n  token_in: string;\n  token_out: string;\n  single_amount_in: string;\n  start_time: number;\n  interval_time: number;\n  count: number;\n  lowest_price: string;\n  highest_price: string;\n  slippage: number;\n  base_token: BotModel.Token;\n  quote_token: BotModel.Token;\n  total_base_investment: string;\n  total_quote_investment: string;\n  recommender?: string;\n}\n\nexport type GridInfo = Partial<GridBotContractParams> & {\n  buy: Big[];\n  sell: Big[];\n  wait: Big[];\n};\n\nexport const BOT_PRICE_DECIMALS = 18;\nexport const DCA_PRICE_DECIMALS = 10;\n\nexport const botContractServices = {\n  async queryMinDeposit(botType: BotModel.BotType, token: BotModel.Token) {\n    const priceRes = await pairServices.queryPrice(token.code);\n    const price = priceRes?.[token.code];\n    // mini deposit = 10USD\n    const minDepositByPrice = price ? new Big(10).div(price).round(8, Big.roundUp).toString() : '0';\n\n    const minDepositByContract =\n      globalState.get('chain') === 'near'\n        ? await botNearContractServices.queryMinDeposit(botType, token)\n        : await botSolanaContractServices.queryMinDeposit(botType, token);\n\n    return new Big(minDepositByPrice || 0).gt(minDepositByContract || 0)\n      ? minDepositByPrice\n      : minDepositByContract;\n  },\n\n  async queryUserBalance(token: string, decimals?: number) {\n    switch (globalState.get('chain')) {\n      case 'near':\n        return botNearContractServices.queryUserBalance(token, decimals);\n      case 'solana':\n        return botSolanaContractServices.queryUserBalance(token, decimals);\n    }\n  },\n\n  queryBotStorageFee(gridCount: number) {\n    switch (globalState.get('chain')) {\n      case 'near':\n        return botNearContractServices.queryBotStorageFee(gridCount);\n      case 'solana':\n        return botSolanaContractServices.queryBotStorageFee(gridCount);\n    }\n  },\n};\n\nexport const botNearContractServices = {\n  async queryMinDeposit(botType: BotModel.BotType, token: BotModel.Token) {\n    const result = await nearContractServices.query<string>({\n      contractId: botType === 'dca' ? getConfigs().nearDCAContract : getConfigs().nearGridContract,\n      method: 'query_min_deposit',\n      args: { token: token.code },\n    });\n    const formattedResult = formatAmount(result, token.decimals);\n    const multiplier = botType === 'dca' ? 1 : 1.5;\n    return new Big(formattedResult || 0).times(multiplier).toString();\n  },\n  async createGridBot(\n    params: GridBotContractParams & {\n      type: BotModel.GridBotType;\n    },\n  ) {\n    try {\n      const {\n        type,\n        grid_type,\n        grid_offset,\n        grid_rate,\n        trigger_price,\n        take_profit_price,\n        stop_loss_price,\n        valid_until_time,\n        first_base_amount,\n        first_quote_amount,\n        last_base_amount,\n        last_quote_amount,\n        entry_price,\n        slippage,\n        total_base_investment,\n        total_quote_investment,\n        base_token,\n        quote_token,\n        name,\n        pair_id,\n        fill_base_or_quote,\n        grid_buy_count,\n        grid_sell_count,\n        recommender,\n      } = params;\n\n      const formattedParams = {\n        grid_type,\n        grid_offset:\n          grid_type === 'EqOffset'\n            ? parseAmount(\n                grid_offset,\n                fill_base_or_quote ? quote_token?.decimals : base_token?.decimals,\n              )\n            : '0',\n        grid_rate: grid_type === 'EqRate' ? grid_rate : 0,\n        trigger_price: parseAmount(trigger_price, BOT_PRICE_DECIMALS),\n        take_profit_price: parseAmount(take_profit_price, BOT_PRICE_DECIMALS),\n        stop_loss_price: parseAmount(stop_loss_price, BOT_PRICE_DECIMALS),\n        valid_until_time,\n        slippage: Number(parseAmount(slippage, 2)),\n        first_base_amount: parseAmount(first_base_amount, base_token?.decimals),\n        first_quote_amount: parseAmount(first_quote_amount, quote_token?.decimals),\n        last_base_amount: parseAmount(last_base_amount, base_token?.decimals),\n        last_quote_amount: parseAmount(last_quote_amount, quote_token?.decimals),\n        entry_price: parseAmount(entry_price, BOT_PRICE_DECIMALS),\n        name: type === 'swing' ? `[${type}]${name}` : name,\n        pair_id,\n        fill_base_or_quote,\n        grid_buy_count,\n        grid_sell_count,\n        recommender,\n      };\n\n      const baseTokenBotRegisterTransaction = await this.getTokenBotRegisterTransaction(\n        base_token.code,\n        total_base_investment,\n      );\n      const quoteTokenBotRegisterTransaction = await this.getTokenBotRegisterTransaction(\n        quote_token.code,\n        total_quote_investment,\n      );\n\n      const baseTokenTransferTransaction = await this.getTokenTransferTransaction(\n        base_token.code,\n        total_base_investment,\n      );\n      const quoteTokenTransferTransaction = await this.getTokenTransferTransaction(\n        quote_token.code,\n        total_quote_investment,\n      );\n\n      const botStorageFee = this.queryBotStorageFee(grid_buy_count + grid_sell_count);\n\n      const createBotDeposit = new Big(botStorageFee)\n        .plus(\n          base_token.symbol === 'NEAR'\n            ? total_base_investment\n            : quote_token.symbol === 'NEAR'\n              ? total_quote_investment\n              : 0,\n        )\n        .toString();\n\n      const createBotTransactionAction = {\n        contractId: getConfigs().nearGridContract,\n        actions: [\n          {\n            method: 'create_bot',\n            args: formattedParams,\n            deposit: parseAmount(createBotDeposit, NEAR_DECIMALS),\n            gas: parseAmount(300, NEAR_TGAS_DECIMALS),\n          },\n        ],\n      };\n      const transactions = [\n        baseTokenBotRegisterTransaction,\n        quoteTokenBotRegisterTransaction,\n        baseTokenTransferTransaction,\n        quoteTokenTransferTransaction,\n        createBotTransactionAction,\n      ].filter(Boolean) as TransactionParams[];\n\n      return nearContractServices.transformTransactionActions(transactions);\n    } catch (error) {\n      console.error('createGridBot error', error);\n      return Promise.reject(error);\n    }\n  },\n\n  async createDCABot(params: DCABotContractParams) {\n    try {\n      const {\n        base_token,\n        quote_token,\n        token_in,\n        token_out,\n        single_amount_in,\n        start_time,\n        interval_time,\n        count,\n        lowest_price,\n        highest_price,\n        slippage,\n        total_base_investment,\n        total_quote_investment,\n        name,\n        recommender,\n      } = params;\n\n      const tokenInMeta = getTokenByAddress(token_in);\n\n      const formattedParams = {\n        token_in,\n        token_out,\n        single_amount_in: parseAmount(single_amount_in, tokenInMeta?.decimals),\n        start_time:\n          start_time && dayjs(start_time).isAfter(dayjs().add(10, 'minute'))\n            ? dayjs(start_time).valueOf()\n            : dayjs().add(10, 'minute').valueOf(),\n        interval_time,\n        count: Number(count),\n        lowest_price: Number(parseAmount(lowest_price, DCA_PRICE_DECIMALS)),\n        highest_price: Number(parseAmount(highest_price, DCA_PRICE_DECIMALS)),\n        slippage: Number(parseAmount(slippage, 2)),\n        name,\n        recommender,\n      };\n\n      const baseTokenRegisterTransaction = await this.getTokenBotRegisterTransaction(\n        base_token.code,\n        total_base_investment,\n        getConfigs().nearDCAContract,\n      );\n      const quoteTokenBotRegisterTransaction = await this.getTokenBotRegisterTransaction(\n        quote_token.code,\n        total_quote_investment,\n        getConfigs().nearDCAContract,\n      );\n\n      const baseTokenTransferTransaction = await this.getTokenTransferTransaction(\n        base_token.code,\n        total_base_investment,\n        getConfigs().nearDCAContract,\n      );\n      const quoteTokenTransferTransaction = await this.getTokenTransferTransaction(\n        quote_token.code,\n        total_quote_investment,\n        getConfigs().nearDCAContract,\n      );\n\n      const createBotDeposit = '0.01';\n\n      const createBotTransactionAction = {\n        contractId: getConfigs().nearDCAContract,\n        actions: [\n          {\n            method: 'create_dca',\n            args: formattedParams,\n            deposit: parseAmount(createBotDeposit, NEAR_DECIMALS),\n            gas: parseAmount(300, NEAR_TGAS_DECIMALS),\n          },\n        ],\n      };\n      const transactions = [\n        baseTokenRegisterTransaction,\n        quoteTokenBotRegisterTransaction,\n        baseTokenTransferTransaction,\n        quoteTokenTransferTransaction,\n        createBotTransactionAction,\n      ].filter(Boolean) as TransactionParams[];\n\n      return nearContractServices.transformTransactionActions(transactions);\n    } catch (error) {\n      console.error('createDCABot error', error);\n      return Promise.reject(error);\n    }\n  },\n\n  async getTokenBotRegisterTransaction(\n    tokenAddress: string,\n    totalInvestment: string,\n    contractId = getConfigs().nearGridContract,\n  ) {\n    if (new Big(totalInvestment).eq(0)) return;\n    const isRegistered = await nearContractServices.query<boolean>({\n      contractId,\n      method: 'query_user_token_registered',\n      args: { token: tokenAddress, user: globalState.get('accountId') },\n    });\n    if (!isRegistered) {\n      return {\n        contractId,\n        actions: [\n          {\n            method: 'token_storage_deposit',\n            args: { token: tokenAddress, user: globalState.get('accountId') },\n            deposit: parseAmount(0.02),\n          },\n        ],\n      } as TransactionParams;\n    }\n  },\n\n  async getTokenTransferTransaction(\n    tokenAddress: string,\n    totalInvestment: string,\n    receiverId = getConfigs().nearGridContract,\n  ) {\n    const tokenMeta = getTokenByAddress(tokenAddress);\n    if (!tokenMeta) return;\n    // Skip NEAR token transfer to bot contract, because it's not necessary\n    if (receiverId === getConfigs().nearGridContract && tokenMeta.symbol === 'NEAR') return;\n    if (new Big(totalInvestment).gt(0)) {\n      return {\n        contractId: tokenAddress,\n        actions: [\n          {\n            method: 'ft_transfer_call',\n            args: {\n              amount: parseAmount(totalInvestment, tokenMeta?.decimals),\n              receiver_id: receiverId,\n              msg: '',\n            },\n            deposit: '1',\n          },\n        ],\n      } as TransactionParams;\n    } else {\n      const storageDepositTransaction = await nearContractServices.registerToken(tokenAddress);\n      return storageDepositTransaction;\n    }\n  },\n\n  queryBotStorageFee(gridCount: number) {\n    //0.02 + 0.0036*(countBuy + countSell)\n    return new Big(0.02).plus(new Big(0.004).times(gridCount)).toString();\n  },\n\n  async claimGridBot(id: number) {\n    const transactions = [\n      {\n        contractId: getConfigs().nearGridContract,\n        actions: [\n          {\n            method: 'claim',\n            args: { bot_id: 'GRID:' + id },\n            deposit: '1',\n          },\n        ],\n      },\n    ];\n    return nearContractServices.transformTransactionActions(transactions);\n  },\n\n  async claimDCABot(id: string) {\n    const transactions = [\n      {\n        contractId: getConfigs().nearDCAContract,\n        actions: [\n          {\n            method: 'claim',\n            args: { vault_id: id },\n            deposit: '1',\n          },\n        ],\n      },\n    ];\n    return nearContractServices.transformTransactionActions(transactions);\n  },\n\n  async closeGridBot(bot_id: number) {\n    const transactions = [\n      {\n        contractId: getConfigs().nearGridContract,\n        actions: [\n          {\n            method: 'close_bot',\n            args: { bot_id: 'GRID:' + bot_id.toString() },\n            deposit: '1',\n            gas: parseAmount(300, NEAR_TGAS_DECIMALS),\n          },\n        ],\n      },\n    ];\n    return nearContractServices.transformTransactionActions(transactions);\n  },\n  async closeDCABot(dca_id: string) {\n    const transactions = [\n      {\n        contractId: getConfigs().nearDCAContract,\n        actions: [\n          {\n            method: 'close_dca',\n            args: { vault_id: dca_id },\n            deposit: '1',\n            gas: parseAmount(300, NEAR_TGAS_DECIMALS),\n          },\n        ],\n      },\n    ];\n    return nearContractServices.transformTransactionActions(transactions);\n  },\n  async queryUserBalance(token: string, decimals?: number) {\n    const accountId = globalState.get('accountId');\n    const [res1, res2] = await Promise.all(\n      [getConfigs().nearGridContract, getConfigs().nearDCAContract].map(async (contractId) => {\n        return nearContractServices.query<string>({\n          contractId,\n          method: 'query_user_balance',\n          args: { user: accountId, token },\n        });\n      }),\n    );\n    const total = new Big(res1 || 0).plus(res2 || 0).toString();\n    return formatAmount(total, decimals || getTokenByAddress(token)?.decimals);\n  },\n  async withdraw(token: string) {\n    const accountId = globalState.get('accountId');\n    const [res1, res2] = await Promise.all(\n      [getConfigs().nearGridContract, getConfigs().nearDCAContract].map(async (contractId) => {\n        const amount = await nearContractServices.query<string>({\n          contractId,\n          method: 'query_user_balance',\n          args: { user: accountId, token },\n        });\n        return { contractId, amount };\n      }),\n    );\n    const transactions = [res1, res2]\n      .filter((item) => new Big(item.amount || 0).gt(0))\n      .map((item) => ({\n        contractId: item.contractId,\n        actions: [\n          {\n            method: 'withdraw',\n            args: { token },\n            deposit: '1',\n          },\n        ],\n      }));\n    return nearContractServices.transformTransactionActions(transactions);\n  },\n};\n\nconst SOLANA_BOT_PRICE_DECIMALS = 10;\n\nexport const botSolanaContractServices = {\n  createProgram() {\n    const connection = solanaContractServices.connect();\n    const programId = new PublicKey(getConfigs().solanaGridContract);\n    const program = new anchor.Program<Deltabot>(IDL, programId, { connection });\n    return program;\n  },\n  async createGridBot(\n    params: GridBotContractParams & {\n      type: BotModel.GridBotType;\n    },\n  ) {\n    console.log('createGridBot params', params);\n    const baseTokenDecimals = getTokenDecimals(params.base_token.symbol, 'solana');\n    const quoteTokenDecimals = getTokenDecimals(params.quote_token.symbol, 'solana');\n    const {\n      name,\n      slippage,\n      grid_type,\n      grid_rate,\n      grid_offset,\n      first_base_amount,\n      first_quote_amount,\n      last_base_amount,\n      last_quote_amount,\n      fill_base_or_quote,\n      trigger_price,\n      take_profit_price,\n      stop_loss_price,\n      valid_until_time,\n      entry_price,\n      base_token,\n      quote_token,\n      total_base_investment,\n      total_quote_investment,\n      grid_buy_count,\n      grid_sell_count,\n      recommender,\n    } = {\n      ...params,\n      grid_type: params.grid_type === 'EqOffset' ? 0 : 1,\n      grid_offset: new anchor.BN(\n        params.grid_type === 'EqOffset'\n          ? parseAmount(\n              params.grid_offset,\n              params.fill_base_or_quote ? quoteTokenDecimals : baseTokenDecimals,\n            )\n          : '0',\n      ),\n      grid_rate: (params.grid_type === 'EqRate' ? params.grid_rate : 0) ?? 0,\n      trigger_price: new anchor.BN(parseAmount(params.trigger_price, SOLANA_BOT_PRICE_DECIMALS)),\n      take_profit_price: new anchor.BN(\n        parseAmount(params.take_profit_price, SOLANA_BOT_PRICE_DECIMALS),\n      ),\n      stop_loss_price: new anchor.BN(\n        parseAmount(params.stop_loss_price, SOLANA_BOT_PRICE_DECIMALS),\n      ),\n      valid_until_time: new anchor.BN(params.valid_until_time || 0),\n      slippage: Number(parseAmount(params.slippage, 2)),\n      first_base_amount: new anchor.BN(parseAmount(params.first_base_amount, baseTokenDecimals)),\n      first_quote_amount: new anchor.BN(parseAmount(params.first_quote_amount, quoteTokenDecimals)),\n      last_base_amount: new anchor.BN(parseAmount(params.last_base_amount, baseTokenDecimals)),\n      last_quote_amount: new anchor.BN(parseAmount(params.last_quote_amount, quoteTokenDecimals)),\n      entry_price: new anchor.BN(parseAmount(params.entry_price, SOLANA_BOT_PRICE_DECIMALS)),\n      name: params.type === 'swing' ? `[${params.type}]${params.name}` : params.name,\n      fill_base_or_quote: params.fill_base_or_quote,\n      total_base_investment: parseAmount(params.total_base_investment, baseTokenDecimals),\n      total_quote_investment: parseAmount(params.total_quote_investment, quoteTokenDecimals),\n    };\n\n    const userPublicKey = new PublicKey(globalState.get('accountId')!);\n    if (!userPublicKey) return Promise.reject('No user public key');\n\n    const baseTokenPublicKey = new PublicKey(getTokenAddress(base_token.symbol, 'solana')!);\n    const quoteTokenPublicKey = new PublicKey(getTokenAddress(quote_token.symbol, 'solana')!);\n    const program = this.createProgram();\n    const userStatePDA = this.getUserStatePDA(program, userPublicKey);\n\n    const pairPDA = this.getPairAccountPDA(program, baseTokenPublicKey, quoteTokenPublicKey);\n    const gridBotState = new PublicKey(getConfigs().solanaGridBotState);\n    console.log('createBot query start');\n    const [\n      baseGlobalBalanceInfo,\n      quoteGlobalBalanceInfo,\n      baseDepositLimitAccountPDA,\n      quoteDepositLimitAccountPDA,\n      { nextUserBotId },\n    ] = await Promise.all([\n      this.getGlobalBalanceInfo(program, baseTokenPublicKey),\n      this.getGlobalBalanceInfo(program, quoteTokenPublicKey),\n      this.getDepositLimitAccountPDA(program, baseTokenPublicKey),\n      this.getDepositLimitAccountPDA(program, quoteTokenPublicKey),\n\n      this.getNextBotId(program, userPublicKey),\n    ]);\n    console.log('createBot query finished');\n    const gridBotPDA = this.getGridBotAccountPDA(program, userPublicKey, nextUserBotId);\n\n    const [userBaseTokenAccount, userQuoteTokenAccount] = await Promise.all([\n      getAssociatedTokenAddress(baseTokenPublicKey, userPublicKey),\n      getAssociatedTokenAddress(quoteTokenPublicKey, userPublicKey),\n    ]);\n    const [referralRecordPDA] = solanaContractServices.findProgramAddressSync(\n      [\n        Buffer.from('referral_record'),\n        new PublicKey(getConfigs().solanaGridBotState).toBuffer(),\n        userPublicKey.toBuffer(),\n      ],\n      program.programId,\n    );\n\n    const createBotInstruction = program.methods\n      .createBot(\n        name,\n        grid_type,\n        grid_rate,\n        grid_offset,\n        first_base_amount,\n        first_quote_amount,\n        last_base_amount,\n        last_quote_amount,\n        fill_base_or_quote,\n        valid_until_time,\n        entry_price,\n        recommender ? new PublicKey(recommender) : null,\n      )\n      .accounts({\n        gridBotState: gridBotState,\n        userState: userStatePDA,\n        baseMint: baseTokenPublicKey,\n        quoteMint: quoteTokenPublicKey,\n        pair: pairPDA,\n        gridBot: gridBotPDA,\n        globalBalanceBaseUser: baseGlobalBalanceInfo.user,\n        globalBalanceBase: baseGlobalBalanceInfo.tokenAccount,\n\n        globalBalanceQuoteUser: quoteGlobalBalanceInfo.user,\n        globalBalanceQuote: quoteGlobalBalanceInfo.tokenAccount,\n\n        depositLimitBase: baseDepositLimitAccountPDA,\n        depositLimitQuote: quoteDepositLimitAccountPDA,\n\n        userBaseTokenAccount: userBaseTokenAccount,\n        userQuoteTokenAccount: userQuoteTokenAccount,\n\n        tokenProgram: TOKEN_PROGRAM_ID,\n        associatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID,\n        referralRecord: referralRecordPDA,\n        user: userPublicKey,\n        systemProgram: anchor.web3.SystemProgram.programId,\n      })\n      .instruction();\n\n    const [\n      baseTokenWrapOrCreateTransaction,\n      quoteTokenWrapOrCreateTransaction,\n      createBotAccountTransaction,\n      createBotTransaction,\n    ] = await Promise.all([\n      base_token.symbol === 'SOL'\n        ? solanaContractServices.convertSOL('wrap', BigInt(total_base_investment))\n        : solanaContractServices.createAssociatedTokenAccount(baseTokenPublicKey, userPublicKey),\n      quote_token.symbol === 'SOL'\n        ? solanaContractServices.convertSOL('wrap', BigInt(total_quote_investment))\n        : solanaContractServices.createAssociatedTokenAccount(quoteTokenPublicKey, userPublicKey),\n      this.getCreateBotAccountTransaction(program, userPublicKey, grid_sell_count, grid_buy_count),\n      createBotInstruction,\n    ]);\n    const transactions = [\n      baseTokenWrapOrCreateTransaction?.transaction,\n      quoteTokenWrapOrCreateTransaction?.transaction,\n      createBotAccountTransaction,\n      createBotTransaction,\n    ].filter(Boolean) as anchor.web3.TransactionInstruction[];\n\n    return transactions;\n  },\n  async createDCABot(params: DCABotContractParams) {\n    throw Error('Not implemented');\n  },\n  async claimGridBot(id: number) {\n    const { userStateId } = this.transformIds(id);\n    const userPublicKey = new PublicKey(globalState.get('accountId')!);\n    if (!userPublicKey) return Promise.reject('No user public key');\n    const bot = await botServices.queryDetail('grid', id);\n    if (!bot) return Promise.reject('No bot found');\n    const program = this.createProgram();\n    const gridBotPDA = this.getGridBotAccountPDA(program, userPublicKey, userStateId);\n    const baseTokenPublicKey = new PublicKey(bot?.base_token.code);\n    const quoteTokenPublicKey = new PublicKey(bot?.quote_token.code);\n\n    const gridBotState = new PublicKey(getConfigs().solanaGridBotState);\n    const pairPDA = this.getPairAccountPDA(program, baseTokenPublicKey, quoteTokenPublicKey);\n    // const userStatePDA = this.getUserStatePDA(program, userPublicKey);\n\n    const [\n      baseGlobalBalanceInfo,\n      quoteGlobalBalanceInfo,\n      userBaseTokenAccount,\n      userQuoteTokenAccount,\n    ] = await Promise.all([\n      this.getGlobalBalanceInfo(program, baseTokenPublicKey),\n      this.getGlobalBalanceInfo(program, quoteTokenPublicKey),\n      getAssociatedTokenAddress(baseTokenPublicKey, userPublicKey),\n      getAssociatedTokenAddress(quoteTokenPublicKey, userPublicKey),\n    ]);\n\n    const [baseCreateAccountTransaction, quoteCreateAccountTransaction, claimBotTransaction] =\n      await Promise.all([\n        solanaContractServices.createAssociatedTokenAccount(baseTokenPublicKey, userPublicKey),\n        solanaContractServices.createAssociatedTokenAccount(quoteTokenPublicKey, userPublicKey),\n        program.methods\n          .claim({\n            userStateId,\n            globalBaseBump: baseGlobalBalanceInfo.bump,\n            globalQuoteBump: quoteGlobalBalanceInfo.bump,\n          })\n          .accounts({\n            gridBotState: gridBotState,\n            pair: pairPDA,\n            gridBot: gridBotPDA,\n            globalBalanceBaseUser: baseGlobalBalanceInfo.user,\n            globalBalanceBase: baseGlobalBalanceInfo.tokenAccount,\n            globalBalanceQuoteUser: quoteGlobalBalanceInfo.user,\n            globalBalanceQuote: quoteGlobalBalanceInfo.tokenAccount,\n            user: userPublicKey,\n            tokenProgram: TOKEN_PROGRAM_ID,\n            associatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID,\n            systemProgram: anchor.web3.SystemProgram.programId,\n            userBaseTokenAccount,\n            userQuoteTokenAccount,\n            baseMint: baseTokenPublicKey,\n            quoteMint: quoteTokenPublicKey,\n          })\n          .instruction(),\n      ]);\n\n    const transactions = [\n      baseCreateAccountTransaction?.transaction,\n      quoteCreateAccountTransaction?.transaction,\n      claimBotTransaction,\n    ].filter(Boolean) as anchor.web3.TransactionInstruction[];\n    return transactions;\n  },\n  async claimDCABot(id: string) {\n    return Promise.reject('Not implemented');\n  },\n  async closeGridBot(id: number) {\n    const { userStateId } = this.transformIds(id);\n    const userPublicKey = new PublicKey(globalState.get('accountId')!);\n    if (!userPublicKey) return Promise.reject('No user public key');\n    const program = this.createProgram();\n    const gridBotPDA = this.getGridBotAccountPDA(program, userPublicKey, userStateId);\n    const botInfo = await program.account.gridBot.fetch(gridBotPDA);\n    if (!botInfo) return Promise.reject('No bot found');\n    const [baseToken, quoteToken] = botInfo.pairId.split(':');\n    const baseTokenPublicKey = new PublicKey(baseToken);\n    const quoteTokenPublicKey = new PublicKey(quoteToken);\n\n    console.log('totalBaseAmount', botInfo.totalBaseAmount.toNumber());\n    console.log('totalQuoteAmount', botInfo.totalQuoteAmount.toNumber());\n\n    const gridBotState = new PublicKey(getConfigs().solanaGridBotState);\n    const pairPDA = this.getPairAccountPDA(program, baseTokenPublicKey, quoteTokenPublicKey);\n\n    const [\n      baseGlobalBalanceInfo,\n      quoteGlobalBalanceInfo,\n      userBaseTokenAccount,\n      userQuoteTokenAccount,\n    ] = await Promise.all([\n      this.getGlobalBalanceInfo(program, baseTokenPublicKey),\n      this.getGlobalBalanceInfo(program, quoteTokenPublicKey),\n      getAssociatedTokenAddress(baseTokenPublicKey, userPublicKey),\n      getAssociatedTokenAddress(quoteTokenPublicKey, userPublicKey),\n    ]);\n\n    const [\n      baseCreateAccountTransaction,\n      quoteCreateAccountTransaction,\n      closeBotTransaction,\n      unwrapBaseTransaction,\n      unwrapQuoteTransaction,\n    ] = await Promise.all([\n      solanaContractServices.createAssociatedTokenAccount(baseTokenPublicKey, userPublicKey),\n      solanaContractServices.createAssociatedTokenAccount(quoteTokenPublicKey, userPublicKey),\n      program.methods\n        .closeBot({\n          userStateId: userStateId,\n          globalBaseBump: baseGlobalBalanceInfo.bump,\n          globalQuoteBump: quoteGlobalBalanceInfo.bump,\n        })\n        .accounts({\n          gridBotState: gridBotState,\n          pair: pairPDA,\n          gridBot: gridBotPDA,\n          globalBalanceBaseUser: baseGlobalBalanceInfo.user,\n          globalBalanceBase: baseGlobalBalanceInfo.tokenAccount,\n          globalBalanceQuoteUser: quoteGlobalBalanceInfo.user,\n          globalBalanceQuote: quoteGlobalBalanceInfo.tokenAccount,\n          user: userPublicKey,\n          tokenProgram: TOKEN_PROGRAM_ID,\n          associatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID,\n          systemProgram: anchor.web3.SystemProgram.programId,\n          baseMint: baseTokenPublicKey,\n          quoteMint: quoteTokenPublicKey,\n          userBaseTokenAccount,\n          userQuoteTokenAccount,\n        })\n        .instruction(),\n      getTokenByAddress(baseToken)?.symbol === 'SOL'\n        ? solanaContractServices.convertSOL('unwrap', BigInt(botInfo.totalBaseAmount.toNumber()))\n        : undefined,\n      getTokenByAddress(quoteToken)?.symbol === 'SOL'\n        ? solanaContractServices.convertSOL('unwrap', BigInt(botInfo.totalQuoteAmount.toNumber()))\n        : undefined,\n    ]);\n    const transactions = [\n      baseCreateAccountTransaction?.transaction,\n      quoteCreateAccountTransaction?.transaction,\n      closeBotTransaction,\n      unwrapBaseTransaction?.transaction,\n      unwrapQuoteTransaction?.transaction,\n    ].filter(Boolean) as anchor.web3.TransactionInstruction[];\n\n    return transactions;\n  },\n  async closeDCABot(dca_id: string) {\n    return Promise.reject('Not implemented');\n  },\n  async queryUserBalance(token: string, decimals?: number) {\n    return;\n  },\n  async withdraw(token: string) {\n    return;\n  },\n  queryBotStorageFee(gridCount: number) {\n    return '0';\n  },\n  async queryMinDeposit(botType: BotModel.BotType, token: BotModel.Token) {\n    return SOLANA_MIN_DEPOSIT[token.symbol as keyof typeof SOLANA_MIN_DEPOSIT];\n  },\n  transformIds(id: number) {\n    const res = String(id).match(/^(\\d+)(\\d{9})$/);\n    if (!res) throw new Error('Invalid bot id');\n    return {\n      botId: Number(res[1]),\n      userStateId: Number(res[2]),\n    };\n  },\n  async getCreateBotAccountTransaction(\n    program: anchor.Program<Deltabot>,\n    user: anchor.web3.PublicKey,\n    grid_sell_count: number,\n    grid_buy_count: number,\n  ) {\n    console.log('getCreateBotAccountTransaction start');\n    const { nextUserBotId } = await this.getNextBotId(program, user);\n    const gridBotState = new PublicKey(getConfigs().solanaGridBotState);\n    const userStatePDA = this.getUserStatePDA(program, user);\n\n    const gridBot = this.getGridBotAccountPDA(program, user, nextUserBotId);\n    console.log('getCreateBotAccountTransaction', {\n      nextUserBotId,\n      gridBotState: gridBotState.toString(),\n      userState: userStatePDA.toString(),\n      gridBot: gridBot.toString(),\n      user,\n      systemProgram: anchor.web3.SystemProgram.programId,\n    });\n    const res = await program.methods\n      .createBotAccount(grid_sell_count, grid_buy_count)\n      .accounts({\n        gridBotState: gridBotState,\n        userState: userStatePDA,\n        gridBot: gridBot,\n        user,\n        systemProgram: anchor.web3.SystemProgram.programId,\n      })\n      .instruction();\n    console.log('getCreateBotAccountTransaction finished', res);\n    return res;\n  },\n\n  getPairAccountPDA(\n    program: anchor.Program<Deltabot>,\n    baseToken: anchor.web3.PublicKey,\n    quoteToken: anchor.web3.PublicKey,\n  ) {\n    const [pda] = solanaContractServices.findProgramAddressSync(\n      [\n        new PublicKey(getConfigs().solanaGridBotState).toBuffer(),\n        baseToken.toBuffer(),\n        quoteToken.toBuffer(),\n      ],\n      program.programId,\n    );\n    return pda;\n  },\n  getUserStatePDA(program: anchor.Program<Deltabot>, user: anchor.web3.PublicKey) {\n    const [pda] = solanaContractServices.findProgramAddressSync(\n      [\n        Buffer.from('user_state'),\n        new PublicKey(getConfigs().solanaGridBotState).toBuffer(),\n        user.toBuffer(),\n      ],\n      program.programId,\n    );\n    return pda;\n  },\n  async getNextBotId(program: anchor.Program<Deltabot>, user: anchor.web3.PublicKey) {\n    let nextUserBotId = 0;\n    const userStatePDA = this.getUserStatePDA(program, user);\n    try {\n      const accountInfo = await program.account.userState.fetch(userStatePDA);\n      if (accountInfo) {\n        nextUserBotId = accountInfo.nextUserBotId;\n        console.log('nextUserBotId:', nextUserBotId);\n        return { nextUserBotId, exists: true };\n      }\n      console.log('nextUserBotId:', nextUserBotId);\n    } catch (error) {\n      console.log('getNextBotId error', error);\n    }\n    return { nextUserBotId, exists: false };\n  },\n  getGridBotAccountPDA(\n    program: anchor.Program<Deltabot>,\n    user: anchor.web3.PublicKey,\n    nextUserBotId: number,\n  ) {\n    // user.key().as_ref(), &grid_bot_state.next_bot_id.to_be_bytes()\n    const nextUserBotIdBuffer = Buffer.alloc(4); // 4 bytes for a 32-bit integer\n    nextUserBotIdBuffer.writeUInt32BE(nextUserBotId);\n    const [pda] = solanaContractServices.findProgramAddressSync(\n      [\n        Buffer.from('user_grid_bot'),\n        new PublicKey(getConfigs().solanaGridBotState).toBuffer(),\n        user.toBuffer(),\n        nextUserBotIdBuffer,\n      ],\n      program.programId,\n    );\n    console.log('getGridBotAccountPDA finished');\n    return pda;\n  },\n\n  async getGlobalBalanceInfo(program: anchor.Program<Deltabot>, token: anchor.web3.PublicKey) {\n    console.log('in registerGlobalBalance token:' + token.toString());\n    const [globalBalUserPDA, globalBalUserBump] = solanaContractServices.findProgramAddressSync(\n      [\n        Buffer.from('global_balance_user'),\n        new PublicKey(getConfigs().solanaGridBotState).toBuffer(),\n        token.toBuffer(),\n      ],\n      program.programId,\n    );\n    const globalBalTokenAccount = await getAssociatedTokenAddress(\n      token,\n      globalBalUserPDA,\n      true,\n      TOKEN_PROGRAM_ID,\n      ASSOCIATED_TOKEN_PROGRAM_ID,\n    );\n\n    return {\n      user: globalBalUserPDA,\n      bump: globalBalUserBump,\n      tokenAccount: globalBalTokenAccount,\n    };\n  },\n\n  getDepositLimitAccountPDA(program: anchor.Program<Deltabot>, token: anchor.web3.PublicKey) {\n    const [pda, bump] = solanaContractServices.findProgramAddressSync(\n      [\n        Buffer.from('deposit_limit'),\n        new PublicKey(getConfigs().solanaGridBotState).toBuffer(),\n        token.toBuffer(),\n      ],\n      program.programId,\n    );\n    return pda;\n  },\n};\n", "const NEAR_RPC_NODE_URLS: Record<string, Record<string, string>> = {\n  mainnet: {\n    Lava: 'https://near.lava.build',\n    Official: 'https://rpc.mainnet.near.org',\n    Fastnear: 'https://free.rpc.fastnear.com',\n    Drpc: 'https://near.drpc.org',\n  },\n  testnet: {\n    Lava: 'https://near-testnet.lava.build',\n    Official: 'https://rpc.testnet.near.org',\n    Drpc: 'https://near-testnet.drpc.org',\n  },\n};\n\nconst SOLANA_RPC_NODE_URLS: Record<string, Record<string, string>> = {\n  mainnet: {\n    Delta: 'https://solana.deltarpc.com/',\n    XNFT: 'https://swr.xnftdata.com/rpc-proxy/',\n    // Chainstack: 'https://solana-mainnet.core.chainstack.com/ed9e4c2d2237fa74cb0a4d61fa07cf79',\n  },\n  testnet: {\n    Official: 'https://api.devnet.solana.com',\n  },\n};\n\nexport function getRPCNodeUrls(chain: Chain, network: NetworkId) {\n  return chain === 'near' ? NEAR_RPC_NODE_URLS[network] : SOLANA_RPC_NODE_URLS[network];\n}\n", "import { getRPCNodeUrls } from '@/config/rpc';\nimport { formatAmount, formatFileUrl, parseAmount } from '@/utils/format';\nimport { getTokenAddress, getTokenByAddress, getTokenMeta } from '@/utils/token';\nimport { type Transaction } from '@near-wallet-selector/core';\n\nimport { connect, providers, keyStores, type Near } from 'near-api-js';\nimport type { QueryResponseKind } from 'near-api-js/lib/providers/provider';\nimport {\n  Connection as solanaConnection,\n  PublicKey,\n  Transaction as solanaTransaction,\n} from '@solana/web3.js';\nimport {\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  createApproveInstruction,\n  createAssociatedTokenAccountInstruction,\n  createSyncNativeInstruction,\n  getAccount,\n  getAssociatedTokenAddress,\n  TOKEN_PROGRAM_ID,\n  NATIVE_MINT,\n  createCloseAccountInstruction,\n} from '@solana/spl-token';\nimport * as anchor from '@coral-xyz/anchor';\nimport { globalState } from '@/stores';\n\nexport const NEAR_DECIMALS = 24;\nexport const NEAR_TGAS_DECIMALS = 12;\n\nexport const STORAGE_DEPOSIT_FEE = '1250000000000000000000';\n\nexport type TransactionParams = {\n  contractId: string;\n  actions: {\n    method: string;\n    args?: any;\n    gas?: string;\n    deposit?: string;\n  }[];\n};\n\nexport const contractServices = {\n  getBalance(tokenAddress: string) {\n    switch (globalState.get('chain')) {\n      case 'near':\n        return nearContractServices.getBalance(tokenAddress);\n      case 'solana':\n        return solanaContractServices.getBalance(tokenAddress);\n    }\n  },\n};\n\nexport const nearContractServices = {\n  getConnectionConfig(network = globalState.get('network')) {\n    const rpcUrls =\n      globalState.get('nearConfig')?.jsonRpcUrls || Object.values(getRPCNodeUrls('near', network));\n    const nodeUrl = rpcUrls[0];\n    const jsonRpcProvider = rpcUrls.map((url) => new providers.JsonRpcProvider({ url }));\n    const provider = new providers.FailoverRpcProvider(jsonRpcProvider);\n    return {\n      networkId: network,\n      keyStore: new keyStores.BrowserLocalStorageKeyStore(),\n      nodeUrl,\n      provider,\n      walletUrl: network === 'mainnet' ? 'https://app.near.org' : 'https://wallet.testnet.near.org',\n      helperUrl:\n        network === 'mainnet' ? 'https://helper.near.org' : 'https://helper.testnet.near.org',\n      explorerUrl:\n        network === 'mainnet' ? 'https://explorer.near.org' : 'https://explorer.testnet.near.org',\n      indexerUrl:\n        network === 'mainnet'\n          ? 'https://near-api.deltatrade.ai'\n          : 'https://testnet-api.deltatrade.ai',\n    };\n  },\n  near: {} as Record<NetworkId, Near>,\n  async connect(network = globalState.get('network')) {\n    if (this.near[network]) return this.near[network];\n    const near = await connect(this.getConnectionConfig(network));\n    this.near[network] = near;\n    return near;\n  },\n  async query<T = any>({\n    contractId,\n    method,\n    args = {},\n    network,\n  }: {\n    contractId: string;\n    method: string;\n    args?: any;\n    gas?: string;\n    deposit?: string;\n    network?: NetworkId;\n  }) {\n    try {\n      const { connection } = await this.connect(network);\n      // console.log(`${method} args`, args);\n      const res = await connection.provider.query({\n        request_type: 'call_function',\n        account_id: contractId,\n        method_name: method,\n        args_base64: Buffer.from(JSON.stringify(args)).toString('base64'),\n        finality: 'final',\n      });\n      const result = JSON.parse(\n        Buffer.from((res as QueryResponseKind & { result: number[] }).result).toString(),\n      ) as T;\n      // console.log(`${method} result`, result);\n      return result;\n    } catch (error) {\n      console.error(`${method} error`, error);\n    }\n  },\n  async getNearBalance() {\n    try {\n      const accountId = globalState.get('accountId')!;\n      const { connection } = await this.connect();\n      const res = await connection.provider.query({\n        request_type: 'view_account',\n        account_id: accountId,\n        finality: 'final',\n      });\n      const tokenMeta = await this.queryTokenMetadata(getTokenAddress('NEAR') || '');\n      const amount = 'amount' in res ? (res.amount as string) : '0';\n      const readableAmount = formatAmount(amount, tokenMeta?.decimals);\n      return readableAmount;\n    } catch (error) {\n      return '0';\n    }\n  },\n\n  /** get balance, if tokenAddress is undefined, get NEAR balance */\n  async getBalance(address: string, decimals?: number) {\n    try {\n      if (address === getTokenAddress('NEAR')) {\n        return this.getNearBalance();\n      } else {\n        const amount =\n          (await this.query<string>({\n            contractId: address,\n            method: 'ft_balance_of',\n            args: { account_id: globalState.get('accountId')! },\n          })) || '0';\n        const tokenMeta = await this.queryTokenMetadata(address);\n        const readableAmount = formatAmount(amount, tokenMeta?.decimals);\n        return readableAmount;\n      }\n    } catch (error) {\n      console.error(error);\n      return '0';\n    }\n  },\n\n  tokenMeta: {} as Record<string, TokenMetadata>,\n  async queryTokenMetadata<T extends string | string[]>(token: T) {\n    if (!token?.length) return;\n    const tokenArr = Array.isArray(token) ? token : [token];\n    const tokensToQuery = tokenArr.filter((t) => !this.tokenMeta[t]);\n\n    if (tokensToQuery.length > 0) {\n      const res = await Promise.allSettled(\n        tokensToQuery.map((token) =>\n          this.query<TokenMetadata>({ contractId: token, method: 'ft_metadata' }),\n        ),\n      );\n\n      const tokenMeta = res.reduce(\n        (acc, token, index) => {\n          if (token.status === 'fulfilled' && token.value) {\n            const tokenMeta = token.value;\n            if (tokenMeta.symbol === 'wNEAR') {\n              tokenMeta.symbol = 'NEAR';\n              tokenMeta.icon = formatFileUrl('/assets/crypto/near.svg');\n            }\n            acc[tokensToQuery[index]] = tokenMeta;\n          }\n          return acc;\n        },\n        {} as Record<string, TokenMetadata>,\n      );\n\n      Object.assign(this.tokenMeta, tokenMeta);\n    }\n\n    if (typeof token === 'string') {\n      return this.tokenMeta[token] as T extends string ? TokenMetadata | undefined : never;\n    }\n    return (tokenArr.length ? this.tokenMeta : undefined) as T extends string\n      ? TokenMetadata | undefined\n      : Record<string, TokenMetadata> | undefined;\n  },\n\n  async transformTransactionActions(params: TransactionParams[]) {\n    const accountId = globalState.get('accountId')!;\n    const minGas = parseAmount(30, NEAR_TGAS_DECIMALS);\n    const defaultGas = parseAmount(200 / params.length, NEAR_TGAS_DECIMALS);\n    const result = [];\n    for (const p of params) {\n      const { contractId, actions } = p;\n      const transaction: Transaction = {\n        receiverId: contractId,\n        signerId: accountId,\n        actions: [],\n      };\n      for (const action of actions) {\n        const { method, args = {}, gas = defaultGas, deposit = '0' } = action;\n        const parsedArgs = JSON.parse(JSON.stringify(args));\n        transaction.actions.push({\n          type: 'FunctionCall',\n          params: {\n            methodName: method,\n            args: parsedArgs,\n            gas,\n            deposit,\n          },\n        });\n        // Call multiple methods from wNEAR contract\n        // Swap NEAR to wNEAR, then transfer wNEAR to others\n        if (method === 'ft_transfer_call' && parsedArgs.amount) {\n          if (contractId === getTokenAddress('NEAR')) {\n            transaction.actions.unshift({\n              type: 'FunctionCall',\n              params: {\n                methodName: 'near_deposit',\n                args: {},\n                deposit: parsedArgs.amount,\n                gas: minGas,\n              },\n            });\n          }\n          const storageDepositTransaction = await this.registerToken(contractId, accountId);\n\n          if (storageDepositTransaction?.actions?.[0]) {\n            transaction.actions.unshift({\n              type: 'FunctionCall',\n              params: {\n                methodName: storageDepositTransaction.actions[0].method,\n                args: storageDepositTransaction.actions[0].args,\n                deposit: storageDepositTransaction.actions[0].deposit || STORAGE_DEPOSIT_FEE,\n                gas: minGas,\n              },\n            });\n          }\n        }\n      }\n      if (transaction.actions.length) {\n        result.push(transaction);\n      }\n    }\n    console.log('transformTransactionActions', result);\n    return result;\n  },\n\n  async registerToken(token: string, recipient?: string) {\n    const res = await this.query<{\n      available: string;\n      total: string;\n    }>({\n      contractId: token,\n      method: 'storage_balance_of',\n      args: { account_id: recipient },\n    });\n    if (!res?.available || res.available === '0') {\n      return {\n        contractId: token,\n        actions: [\n          {\n            method: 'storage_deposit',\n            args: { account_id: recipient, registration_only: true },\n            deposit: STORAGE_DEPOSIT_FEE,\n            gas: parseAmount(30, NEAR_TGAS_DECIMALS),\n          },\n        ],\n      } as TransactionParams;\n    }\n  },\n};\n\nexport const solanaContractServices = {\n  solana: {} as Record<NetworkId, solanaConnection>,\n  connect(network = globalState.get('network')) {\n    if (this.solana[network]) return this.solana[network];\n    const endPoint =\n      globalState.get('solanaConfig')?.endpoint ||\n      Object.values(getRPCNodeUrls('solana', network))[0];\n    const connection = new solanaConnection(endPoint, { commitment: 'confirmed' });\n    this.solana[network] = connection;\n    return connection;\n  },\n  async getSolanaBalance() {\n    try {\n      const connection = this.connect();\n      const publicKey = new PublicKey(globalState.get('accountId')!);\n      const res = await connection.getBalance(publicKey!);\n      return formatAmount(res, getTokenMeta('SOL')?.SolanaDecimals);\n    } catch (error) {\n      console.error(error);\n      return '0';\n    }\n  },\n  async getWrapSolanaBalance() {\n    try {\n      const connection = this.connect();\n      const publicKey = new PublicKey(globalState.get('accountId')!);\n      const tokenAccount = await getAssociatedTokenAddress(\n        NATIVE_MINT,\n        publicKey!,\n        true,\n        TOKEN_PROGRAM_ID,\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n      );\n      const res = await connection.getTokenAccountBalance(tokenAccount);\n      return formatAmount(res.value.amount, res.value.decimals);\n    } catch (error) {\n      return '0';\n    }\n  },\n  async getBalance(tokenAddress: string) {\n    try {\n      if (getTokenByAddress(tokenAddress, 'solana')?.symbol === 'SOL')\n        return this.getSolanaBalance();\n      const connection = this.connect();\n      const publicKey = new PublicKey(globalState.get('accountId')!);\n      const tokenAccount = await getAssociatedTokenAddress(\n        new PublicKey(tokenAddress),\n        publicKey!,\n        true,\n        TOKEN_PROGRAM_ID,\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n      );\n      const res = await connection.getTokenAccountBalance(tokenAccount);\n      return formatAmount(res.value.amount, res.value.decimals);\n    } catch (error) {\n      console.error(error);\n      return '0';\n    }\n  },\n\n  findProgramAddressSync(seeds: Buffer[], programId: PublicKey) {\n    const res = anchor.web3.PublicKey.findProgramAddressSync(seeds, programId);\n    return res;\n  },\n\n  async convertSOL(type: 'wrap' | 'unwrap', amount: number | bigint) {\n    const connection = this.connect();\n    const publicKey = new PublicKey(globalState.get('accountId')!);\n\n    // Get the associated token account address for the user's public key\n    const associatedToken = await getAssociatedTokenAddress(\n      NATIVE_MINT,\n      publicKey!,\n      true,\n      TOKEN_PROGRAM_ID,\n      ASSOCIATED_TOKEN_PROGRAM_ID,\n    );\n\n    const transaction = new solanaTransaction();\n    // Check if the associated token account exists\n    const accountInfo = await connection.getAccountInfo(associatedToken);\n    if (type === 'wrap') {\n      // Wrapping SOL to wSOL\n      if (!accountInfo) {\n        // Create the associated token account if it does not exist\n        transaction.add(\n          createAssociatedTokenAccountInstruction(\n            publicKey!,\n            associatedToken,\n            publicKey!,\n            NATIVE_MINT,\n          ),\n        );\n      }\n\n      // Transfer SOL to the associated token account and sync native token\n      transaction.add(\n        anchor.web3.SystemProgram.transfer({\n          fromPubkey: publicKey!,\n          toPubkey: associatedToken,\n          lamports: amount,\n        }),\n        createSyncNativeInstruction(associatedToken, TOKEN_PROGRAM_ID),\n      );\n    } else if (type === 'unwrap') {\n      // Unwrapping wSOL to SOL\n      // if (!accountInfo) {\n      //   throw new Error('Associated token account not found.');\n      // }\n      transaction.add(createCloseAccountInstruction(associatedToken, publicKey!, publicKey!));\n    } else {\n      throw new Error('Invalid type specified. Use \"wrap\" or \"unwrap\".');\n    }\n\n    return { transaction };\n  },\n\n  async approve(payerTokenAccount: PublicKey, delegate: PublicKey, amount: number | bigint) {\n    const connection = this.connect();\n    const ownerPublicKey = new PublicKey(globalState.get('accountId')!);\n    const tokenAccountInfo = await getAccount(connection, payerTokenAccount);\n    if (tokenAccountInfo.delegate?.equals(delegate) && tokenAccountInfo.delegatedAmount >= amount)\n      return;\n    console.log('approving');\n    const transaction = createApproveInstruction(\n      payerTokenAccount,\n      delegate,\n      ownerPublicKey!,\n      amount,\n    );\n    return { transaction };\n  },\n\n  async createAssociatedTokenAccount(mint: PublicKey, owner: PublicKey) {\n    const connection = this.connect();\n    const publicKey = new PublicKey(globalState.get('accountId')!);\n    const associatedAddress = await getAssociatedTokenAddress(mint, owner);\n    const associatedAccount = await connection.getAccountInfo(associatedAddress);\n    console.log('associatedAccount publicKey', mint);\n    console.log('associatedAccount publicKey.toBase58()', mint.toBase58());\n    console.log('associatedAccount', mint.toBase58(), associatedAccount);\n\n    if (!associatedAccount) {\n      const transaction = createAssociatedTokenAccountInstruction(\n        publicKey!,\n        associatedAddress,\n        owner,\n        mint,\n      );\n      return { transaction };\n    }\n  },\n};\n", "export type Deltabot = {\n  version: '0.1.0';\n  name: 'deltabot';\n  instructions: [\n    {\n      name: 'initialize';\n      accounts: [\n        {\n          name: 'ownerId';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'gridBotState';\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: 'user';\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: 'systemProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: 'createBotAccount';\n      accounts: [\n        {\n          name: 'gridBotState';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userState';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'gridBot';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'user';\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: 'systemProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'gridSellCount';\n          type: 'u16';\n        },\n        {\n          name: 'gridBuyCount';\n          type: 'u16';\n        },\n      ];\n    },\n    {\n      name: 'createBot';\n      accounts: [\n        {\n          name: 'gridBotState';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userState';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'baseMint';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'quoteMint';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'clock';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'pair';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'gridBot';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'globalBalanceBaseUser';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'globalBalanceBase';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'globalBalanceQuoteUser';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'globalBalanceQuote';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'depositLimitBase';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'depositLimitQuote';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userBaseTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userQuoteTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'referralRecord';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'associatedTokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'user';\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: 'systemProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'name';\n          type: 'string';\n        },\n        {\n          name: 'gridType';\n          type: 'u8';\n        },\n        {\n          name: 'gridRate';\n          type: 'u16';\n        },\n        {\n          name: 'gridOffset';\n          type: 'u64';\n        },\n        {\n          name: 'firstBaseAmount';\n          type: 'u64';\n        },\n        {\n          name: 'firstQuoteAmount';\n          type: 'u64';\n        },\n        {\n          name: 'lastBaseAmount';\n          type: 'u64';\n        },\n        {\n          name: 'lastQuoteAmount';\n          type: 'u64';\n        },\n        {\n          name: 'fillBaseOrQuote';\n          type: 'bool';\n        },\n        {\n          name: 'validUntilTime';\n          type: 'u64';\n        },\n        {\n          name: 'entryPrice';\n          type: 'u64';\n        },\n        {\n          name: 'recommenderOp';\n          type: {\n            option: 'publicKey';\n          };\n        },\n      ];\n    },\n    {\n      name: 'closeBot';\n      accounts: [\n        {\n          name: 'gridBotState';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'baseMint';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'quoteMint';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'pair';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'gridBot';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'globalBalanceBaseUser';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'globalBalanceBase';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'globalBalanceQuoteUser';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'globalBalanceQuote';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userBaseTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userQuoteTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'associatedTokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'user';\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: 'systemProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'closeBotParam';\n          type: {\n            defined: 'CloseBotParam';\n          };\n        },\n      ];\n    },\n    {\n      name: 'createOrders';\n      accounts: [\n        {\n          name: 'gridBotState';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'makerForwardOrder';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'makerReverseOrder';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'associatedTokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'user';\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: 'systemProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'createOrderParam';\n          type: {\n            defined: 'CreateOrdersParam';\n          };\n        },\n      ];\n    },\n    {\n      name: 'takeOrders';\n      accounts: [\n        {\n          name: 'gridBotState';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'pair';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'clock';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'takerTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'takerBuyTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'makerGridBot';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'makerForwardOrder';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'makerReverseOrder';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'globalBalanceBaseUser';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'globalBalanceBase';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'globalBalanceQuoteUser';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'globalBalanceQuote';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'protocolBalanceBaseRecord';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'protocolBalanceQuoteRecord';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'makerUsers';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'takerSellLimit';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'referralRecord';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'referralBaseFee';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'referralQuoteFee';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'associatedTokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'user';\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: 'systemProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'takeOrderParam';\n          type: {\n            defined: 'TakeOrdersParam';\n          };\n        },\n      ];\n    },\n    {\n      name: 'claim';\n      accounts: [\n        {\n          name: 'gridBotState';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'baseMint';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'quoteMint';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'gridBot';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'pair';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'globalBalanceBaseUser';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'globalBalanceBase';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'globalBalanceQuoteUser';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'globalBalanceQuote';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userBaseTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userQuoteTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'associatedTokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'user';\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: 'systemProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'claimParam';\n          type: {\n            defined: 'ClaimParam';\n          };\n        },\n      ];\n    },\n    {\n      name: 'setOwner';\n      accounts: [\n        {\n          name: 'newOwnerId';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'gridBotState';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'user';\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: 'systemProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: 'registerGlobalToken';\n      accounts: [\n        {\n          name: 'gridBotState';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'globalBalanceMint';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'globalBalanceUser';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'globalBalance';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'associatedTokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'user';\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: 'systemProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: 'registerProtocolToken';\n      accounts: [\n        {\n          name: 'gridBotState';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'mint';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'protocolRecord';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'user';\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: 'systemProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: 'registerDepositLimit';\n      accounts: [\n        {\n          name: 'token';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'gridBotState';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'depositLimit';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'user';\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: 'systemProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: 'registerPair';\n      accounts: [\n        {\n          name: 'gridBotState';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'pair';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'baseMint';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'quoteMint';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'depositLimitBase';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'depositLimitQuote';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'associatedTokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'user';\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: 'systemProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'baseMinDeposit';\n          type: 'u64';\n        },\n        {\n          name: 'quoteMinDeposit';\n          type: 'u64';\n        },\n      ];\n    },\n    {\n      name: 'setMinDeposit';\n      accounts: [\n        {\n          name: 'token';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'gridBotState';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'depositLimit';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'user';\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: 'systemProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'minDeposit';\n          type: 'u64';\n        },\n      ];\n    },\n    {\n      name: 'setProtocolFeeRate';\n      accounts: [\n        {\n          name: 'gridBotState';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'user';\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: 'systemProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'newProtocolFeeRate';\n          type: 'u32';\n        },\n        {\n          name: 'newTakerFeeRate';\n          type: 'u32';\n        },\n      ];\n    },\n    {\n      name: 'setReferralFeeRate';\n      accounts: [\n        {\n          name: 'gridBotState';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'user';\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: 'systemProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'newReferralFeeRate';\n          type: 'u32';\n        },\n      ];\n    },\n    {\n      name: 'withdrawProtocolFee';\n      accounts: [\n        {\n          name: 'gridBotState';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'mint';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'toUser';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'protocolBalanceUser';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'protocolBalance';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'user';\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: 'systemProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'amount';\n          type: 'u64';\n        },\n        {\n          name: 'bump';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'start';\n      accounts: [\n        {\n          name: 'gridBotState';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'user';\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: 'systemProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: 'pause';\n      accounts: [\n        {\n          name: 'gridBotState';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'user';\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: 'systemProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: 'shutdown';\n      accounts: [\n        {\n          name: 'gridBotState';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'user';\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: 'systemProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: 'setMakerUser';\n      accounts: [\n        {\n          name: 'gridBotState';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'makerUsers';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'user';\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: 'systemProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'makerUser';\n          type: 'publicKey';\n        },\n        {\n          name: 'enable';\n          type: 'bool';\n        },\n      ];\n    },\n  ];\n  accounts: [\n    {\n      name: 'makerUsers';\n      type: {\n        kind: 'struct';\n        fields: [\n          {\n            name: 'users';\n            type: {\n              vec: 'publicKey';\n            };\n          },\n        ];\n      };\n    },\n    {\n      name: 'gridBotState';\n      type: {\n        kind: 'struct';\n        fields: [\n          {\n            name: 'isInitialized';\n            type: 'bool';\n          },\n          {\n            name: 'ownerId';\n            type: 'publicKey';\n          },\n          {\n            name: 'oracleValidTime';\n            type: 'u64';\n          },\n          {\n            name: 'status';\n            type: {\n              defined: 'GridStatus';\n            };\n          },\n          {\n            name: 'protocolFeeRate';\n            docs: ['real_protocol_fee = protocol_fee / 1000000'];\n            type: 'u32';\n          },\n          {\n            name: 'takerFeeRate';\n            type: 'u32';\n          },\n          {\n            name: 'referFeeRate';\n            type: 'u32';\n          },\n          {\n            name: 'nextBotId';\n            docs: ['start from 0, used from 1'];\n            type: 'u64';\n          },\n        ];\n      };\n    },\n    {\n      name: 'userState';\n      type: {\n        kind: 'struct';\n        fields: [\n          {\n            name: 'nextUserBotId';\n            type: 'u32';\n          },\n        ];\n      };\n    },\n    {\n      name: 'dataRecord';\n      type: {\n        kind: 'struct';\n        fields: [\n          {\n            name: 'data';\n            type: 'u64';\n          },\n        ];\n      };\n    },\n    {\n      name: 'referralRecord';\n      type: {\n        kind: 'struct';\n        fields: [\n          {\n            name: 'user';\n            type: 'publicKey';\n          },\n        ];\n      };\n    },\n    {\n      name: 'gridBot';\n      type: {\n        kind: 'struct';\n        fields: [\n          {\n            name: 'isInitialized';\n            type: 'bool';\n          },\n          {\n            name: 'name';\n            type: 'string';\n          },\n          {\n            name: 'active';\n            type: 'bool';\n          },\n          {\n            name: 'user';\n            type: 'publicKey';\n          },\n          {\n            name: 'botId';\n            type: 'u64';\n          },\n          {\n            name: 'closed';\n            type: 'bool';\n          },\n          {\n            name: 'pairId';\n            type: 'string';\n          },\n          {\n            name: 'gridType';\n            type: 'u8';\n          },\n          {\n            name: 'gridSellCount';\n            type: 'u16';\n          },\n          {\n            name: 'gridBuyCount';\n            type: 'u16';\n          },\n          {\n            name: 'gridRate';\n            docs: ['real_grid_rate = grid_rate / 10000'];\n            type: 'u16';\n          },\n          {\n            name: 'gridOffset';\n            type: 'u64';\n          },\n          {\n            name: 'firstBaseAmount';\n            type: 'u64';\n          },\n          {\n            name: 'firstQuoteAmount';\n            type: 'u64';\n          },\n          {\n            name: 'lastBaseAmount';\n            type: 'u64';\n          },\n          {\n            name: 'lastQuoteAmount';\n            type: 'u64';\n          },\n          {\n            name: 'fillBaseOrQuote';\n            type: 'bool';\n          },\n          {\n            name: 'validUntilTime';\n            type: 'u64';\n          },\n          {\n            name: 'totalQuoteAmount';\n            type: 'u64';\n          },\n          {\n            name: 'totalBaseAmount';\n            type: 'u64';\n          },\n          {\n            name: 'revenue';\n            type: 'u64';\n          },\n          {\n            name: 'totalRevenue';\n            type: 'u64';\n          },\n        ];\n      };\n    },\n    {\n      name: 'order';\n      type: {\n        kind: 'struct';\n        fields: [\n          {\n            name: 'tokenSellIsBase';\n            type: 'bool';\n          },\n          {\n            name: 'fillBuyOrSell';\n            type: 'bool';\n          },\n          {\n            name: 'amountSell';\n            type: 'u64';\n          },\n          {\n            name: 'amountBuy';\n            type: 'u64';\n          },\n          {\n            name: 'filled';\n            type: 'u64';\n          },\n        ];\n      };\n    },\n    {\n      name: 'pair';\n      type: {\n        kind: 'struct';\n        fields: [\n          {\n            name: 'baseToken';\n            type: 'publicKey';\n          },\n          {\n            name: 'quoteToken';\n            type: 'publicKey';\n          },\n        ];\n      };\n    },\n    {\n      name: 'accountBalance';\n      type: {\n        kind: 'struct';\n        fields: [\n          {\n            name: 'balance';\n            type: 'u128';\n          },\n        ];\n      };\n    },\n  ];\n  types: [\n    {\n      name: 'GridBotOutput';\n      type: {\n        kind: 'struct';\n        fields: [\n          {\n            name: 'isInitialized';\n            type: 'bool';\n          },\n          {\n            name: 'name';\n            type: 'string';\n          },\n          {\n            name: 'active';\n            type: 'bool';\n          },\n          {\n            name: 'user';\n            type: 'publicKey';\n          },\n          {\n            name: 'botId';\n            type: 'u64';\n          },\n          {\n            name: 'closed';\n            type: 'bool';\n          },\n          {\n            name: 'pairId';\n            type: 'string';\n          },\n          {\n            name: 'gridType';\n            type: 'u8';\n          },\n          {\n            name: 'gridSellCount';\n            type: 'u16';\n          },\n          {\n            name: 'gridBuyCount';\n            type: 'u16';\n          },\n          {\n            name: 'gridRate';\n            docs: ['real_grid_rate = grid_rate / 10000'];\n            type: 'u16';\n          },\n          {\n            name: 'gridOffset';\n            type: 'u64';\n          },\n          {\n            name: 'firstBaseAmount';\n            type: 'u64';\n          },\n          {\n            name: 'firstQuoteAmount';\n            type: 'u64';\n          },\n          {\n            name: 'lastBaseAmount';\n            type: 'u64';\n          },\n          {\n            name: 'lastQuoteAmount';\n            type: 'u64';\n          },\n          {\n            name: 'fillBaseOrQuote';\n            type: 'bool';\n          },\n          {\n            name: 'validUntilTime';\n            type: 'u64';\n          },\n          {\n            name: 'totalQuoteAmount';\n            type: 'u64';\n          },\n          {\n            name: 'totalBaseAmount';\n            type: 'u64';\n          },\n          {\n            name: 'revenue';\n            type: 'u64';\n          },\n          {\n            name: 'totalRevenue';\n            type: 'u64';\n          },\n        ];\n      };\n    },\n    {\n      name: 'PairOutput';\n      type: {\n        kind: 'struct';\n        fields: [\n          {\n            name: 'baseToken';\n            type: 'publicKey';\n          },\n          {\n            name: 'quoteToken';\n            type: 'publicKey';\n          },\n        ];\n      };\n    },\n    {\n      name: 'CloseBotParam';\n      type: {\n        kind: 'struct';\n        fields: [\n          {\n            name: 'userStateId';\n            type: 'u32';\n          },\n          {\n            name: 'globalBaseBump';\n            type: 'u8';\n          },\n          {\n            name: 'globalQuoteBump';\n            type: 'u8';\n          },\n        ];\n      };\n    },\n    {\n      name: 'ClaimParam';\n      type: {\n        kind: 'struct';\n        fields: [\n          {\n            name: 'userStateId';\n            type: 'u32';\n          },\n          {\n            name: 'globalBaseBump';\n            type: 'u8';\n          },\n          {\n            name: 'globalQuoteBump';\n            type: 'u8';\n          },\n        ];\n      };\n    },\n    {\n      name: 'TakeOrdersParam';\n      type: {\n        kind: 'struct';\n        fields: [\n          {\n            name: 'baseMint';\n            type: 'publicKey';\n          },\n          {\n            name: 'quoteMint';\n            type: 'publicKey';\n          },\n          {\n            name: 'makerKey';\n            type: 'publicKey';\n          },\n          {\n            name: 'makerUserStateId';\n            type: 'u32';\n          },\n          {\n            name: 'makerLevel';\n            type: 'u16';\n          },\n          {\n            name: 'makerForwardOrReverse';\n            type: 'bool';\n          },\n          {\n            name: 'tokenSell';\n            type: 'publicKey';\n          },\n          {\n            name: 'tokenBuy';\n            type: 'publicKey';\n          },\n          {\n            name: 'amountSell';\n            type: 'u64';\n          },\n          {\n            name: 'amountBuy';\n            type: 'u64';\n          },\n          {\n            name: 'fillBuyOrSell';\n            type: 'bool';\n          },\n          {\n            name: 'globalBaseBump';\n            type: 'u8';\n          },\n          {\n            name: 'globalQuoteBump';\n            type: 'u8';\n          },\n        ];\n      };\n    },\n    {\n      name: 'CreateOrdersParam';\n      type: {\n        kind: 'struct';\n        fields: [\n          {\n            name: 'makerKey';\n            type: 'publicKey';\n          },\n          {\n            name: 'makerUserStateId';\n            type: 'u32';\n          },\n          {\n            name: 'makerLevel';\n            type: 'u16';\n          },\n        ];\n      };\n    },\n    {\n      name: 'GridStatus';\n      type: {\n        kind: 'enum';\n        variants: [\n          {\n            name: 'Running';\n          },\n          {\n            name: 'Paused';\n          },\n          {\n            name: 'Shutdown';\n          },\n        ];\n      };\n    },\n  ];\n  events: [\n    {\n      name: 'RegisterPairEvent';\n      fields: [\n        {\n          name: 'baseToken';\n          type: 'publicKey';\n          index: false;\n        },\n        {\n          name: 'quoteToken';\n          type: 'publicKey';\n          index: false;\n        },\n      ];\n    },\n    {\n      name: 'CreateEvent';\n      fields: [\n        {\n          name: 'accountId';\n          type: 'publicKey';\n          index: false;\n        },\n        {\n          name: 'botId';\n          type: 'string';\n          index: false;\n        },\n        {\n          name: 'userStateId';\n          type: 'string';\n          index: false;\n        },\n        {\n          name: 'basePrice';\n          type: 'string';\n          index: false;\n        },\n        {\n          name: 'quotePrice';\n          type: 'string';\n          index: false;\n        },\n        {\n          name: 'baseExpo';\n          type: 'string';\n          index: false;\n        },\n        {\n          name: 'quoteExpo';\n          type: 'string';\n          index: false;\n        },\n        {\n          name: 'entryPrice';\n          type: 'u64';\n          index: false;\n        },\n        {\n          name: 'pair';\n          type: {\n            defined: 'PairOutput';\n          };\n          index: false;\n        },\n        {\n          name: 'gridBot';\n          type: {\n            defined: 'GridBotOutput';\n          };\n          index: false;\n        },\n      ];\n    },\n    {\n      name: 'CloseEvent';\n      fields: [\n        {\n          name: 'accountId';\n          type: 'publicKey';\n          index: false;\n        },\n        {\n          name: 'botId';\n          type: 'string';\n          index: false;\n        },\n        {\n          name: 'userStateId';\n          type: 'string';\n          index: false;\n        },\n        {\n          name: 'refund';\n          type: 'u64';\n          index: false;\n        },\n      ];\n    },\n    {\n      name: 'OrderUpdateEvent';\n      fields: [\n        {\n          name: 'botId';\n          type: 'string';\n          index: false;\n        },\n        {\n          name: 'userStateId';\n          type: 'string';\n          index: false;\n        },\n        {\n          name: 'forwardOrReverse';\n          type: 'bool';\n          index: false;\n        },\n        {\n          name: 'level';\n          type: 'u16';\n          index: false;\n        },\n        {\n          name: 'tokenSell';\n          type: 'publicKey';\n          index: false;\n        },\n        {\n          name: 'tokenBuy';\n          type: 'publicKey';\n          index: false;\n        },\n        {\n          name: 'amountSell';\n          type: 'u64';\n          index: false;\n        },\n        {\n          name: 'amountBuy';\n          type: 'u64';\n          index: false;\n        },\n        {\n          name: 'fillBuyOrSell';\n          type: 'bool';\n          index: false;\n        },\n        {\n          name: 'filled';\n          type: 'u64';\n          index: false;\n        },\n      ];\n    },\n    {\n      name: 'TakeOrderEvent';\n      fields: [\n        {\n          name: 'taker';\n          type: 'publicKey';\n          index: false;\n        },\n        {\n          name: 'maker';\n          type: 'publicKey';\n          index: false;\n        },\n        {\n          name: 'makerBotId';\n          type: 'string';\n          index: false;\n        },\n        {\n          name: 'makerUserStateId';\n          type: 'string';\n          index: false;\n        },\n        {\n          name: 'makerForwardOrReverse';\n          type: 'bool';\n          index: false;\n        },\n        {\n          name: 'makerLevel';\n          type: 'u16';\n          index: false;\n        },\n        {\n          name: 'tookSell';\n          type: 'u64';\n          index: false;\n        },\n        {\n          name: 'tookBuy';\n          type: 'u64';\n          index: false;\n        },\n        {\n          name: 'takerFee';\n          type: 'u64';\n          index: false;\n        },\n        {\n          name: 'protocolFee';\n          type: 'u64';\n          index: false;\n        },\n        {\n          name: 'referralFee';\n          type: 'u64';\n          index: false;\n        },\n        {\n          name: 'currentRevenue';\n          type: 'u64';\n          index: false;\n        },\n        {\n          name: 'makerLeftRevenue';\n          type: 'u64';\n          index: false;\n        },\n        {\n          name: 'makerTotalRevenue';\n          type: 'u64';\n          index: false;\n        },\n      ];\n    },\n    {\n      name: 'WithdrawEvent';\n      fields: [\n        {\n          name: 'from';\n          type: 'publicKey';\n          index: false;\n        },\n        {\n          name: 'to';\n          type: 'publicKey';\n          index: false;\n        },\n        {\n          name: 'amount';\n          type: 'u64';\n          index: false;\n        },\n        {\n          name: 'tokenId';\n          type: 'publicKey';\n          index: false;\n        },\n      ];\n    },\n    {\n      name: 'ReferralEvent';\n      fields: [\n        {\n          name: 'user';\n          type: 'publicKey';\n          index: false;\n        },\n        {\n          name: 'recommender';\n          type: 'publicKey';\n          index: false;\n        },\n        {\n          name: 'amount';\n          type: 'u64';\n          index: false;\n        },\n        {\n          name: 'tokenId';\n          type: 'publicKey';\n          index: false;\n        },\n      ];\n    },\n    {\n      name: 'TransferEvent';\n      fields: [\n        {\n          name: 'from';\n          type: 'publicKey';\n          index: false;\n        },\n        {\n          name: 'to';\n          type: 'publicKey';\n          index: false;\n        },\n        {\n          name: 'amount';\n          type: 'u64';\n          index: false;\n        },\n        {\n          name: 'tokenId';\n          type: 'publicKey';\n          index: false;\n        },\n      ];\n    },\n    {\n      name: 'ClaimEvent';\n      fields: [\n        {\n          name: 'claimUser';\n          type: 'publicKey';\n          index: false;\n        },\n        {\n          name: 'botId';\n          type: 'string';\n          index: false;\n        },\n        {\n          name: 'userStateId';\n          type: 'string';\n          index: false;\n        },\n        {\n          name: 'user';\n          type: 'publicKey';\n          index: false;\n        },\n        {\n          name: 'revenueToken';\n          type: 'publicKey';\n          index: false;\n        },\n        {\n          name: 'revenue';\n          type: 'u64';\n          index: false;\n        },\n      ];\n    },\n  ];\n  errors: [\n    {\n      code: 6000;\n      name: 'InvalidProgramId';\n      msg: 'InvalidProgramId';\n    },\n    {\n      code: 6001;\n      name: 'UnexpectedAccount';\n      msg: 'UnexpectedAccount';\n    },\n    {\n      code: 6002;\n      name: 'Initialized';\n      msg: 'Initialized';\n    },\n    {\n      code: 6003;\n      name: 'NotAllowed';\n      msg: 'NotAllowed';\n    },\n    {\n      code: 6004;\n      name: 'InvalidToken';\n      msg: 'InvalidToken';\n    },\n    {\n      code: 6005;\n      name: 'InvalidOracleId';\n      msg: 'InvalidOracleId';\n    },\n    {\n      code: 6006;\n      name: 'HadShutdown';\n      msg: 'HadShutdown';\n    },\n    {\n      code: 6007;\n      name: 'InvalidFeeRate';\n      msg: 'InvalidFeeRate';\n    },\n    {\n      code: 6008;\n      name: 'InvalidAmount';\n      msg: 'InvalidAmount';\n    },\n    {\n      code: 6009;\n      name: 'InvalidUntilTime';\n      msg: 'InvalidUntilTime';\n    },\n    {\n      code: 6010;\n      name: 'InvalidPair';\n      msg: 'InvalidPair';\n    },\n    {\n      code: 6011;\n      name: 'PauseOrShutdown';\n      msg: 'PauseOrShutdown';\n    },\n    {\n      code: 6012;\n      name: 'MoreThanMaxGridCount';\n      msg: 'MoreThanMaxGridCount';\n    },\n    {\n      code: 6013;\n      name: 'LessThanMinGridCount';\n      msg: 'LessThanMinGridCount';\n    },\n    {\n      code: 6014;\n      name: 'InvalidFirstOrLastAmount';\n      msg: 'InvalidFirstOrLastAmount';\n    },\n    {\n      code: 6015;\n      name: 'BaseTooSmall';\n      msg: 'BaseTooSmall';\n    },\n    {\n      code: 6016;\n      name: 'QuoteTooSmall';\n      msg: 'QuoteTooSmall';\n    },\n    {\n      code: 6017;\n      name: 'LessBaseToken';\n      msg: 'LessBaseToken';\n    },\n    {\n      code: 6018;\n      name: 'LessQuoteToken';\n      msg: 'LessQuoteToken';\n    },\n    {\n      code: 6019;\n      name: 'InvalidBotStatus';\n      msg: 'InvalidBotStatus';\n    },\n    {\n      code: 6020;\n      name: 'InvalidUser';\n      msg: 'InvalidUser';\n    },\n    {\n      code: 6021;\n      name: 'InvalidOrderAmount';\n      msg: 'InvalidOrderAmount';\n    },\n    {\n      code: 6022;\n      name: 'LessTokenSell';\n      msg: 'LessTokenSell';\n    },\n    {\n      code: 6023;\n      name: 'InvalidOrderToken';\n      msg: 'InvalidOrderToken';\n    },\n    {\n      code: 6024;\n      name: 'BotClosed';\n      msg: 'BotClosed';\n    },\n    {\n      code: 6025;\n      name: 'BotDisable';\n      msg: 'BotDisable';\n    },\n    {\n      code: 6026;\n      name: 'BotExpired';\n      msg: 'BotExpired';\n    },\n    {\n      code: 6027;\n      name: 'InvalidMakerForwardOrReverse';\n      msg: 'InvalidMakerForwardOrReverse';\n    },\n    {\n      code: 6028;\n      name: 'InvalidOrderMatching';\n      msg: 'InvalidOrderMatching';\n    },\n    {\n      code: 6029;\n      name: 'InvalidName';\n      msg: 'InvalidName';\n    },\n    {\n      code: 6030;\n      name: 'OrderPriceNotMatch';\n      msg: 'OrderPriceNotMatch';\n    },\n  ];\n};\n\nexport const IDL: Deltabot = {\n  version: '0.1.0',\n  name: 'deltabot',\n  instructions: [\n    {\n      name: 'initialize',\n      accounts: [\n        {\n          name: 'ownerId',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'gridBotState',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'user',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'createBotAccount',\n      accounts: [\n        {\n          name: 'gridBotState',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userState',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'gridBot',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'user',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'gridSellCount',\n          type: 'u16',\n        },\n        {\n          name: 'gridBuyCount',\n          type: 'u16',\n        },\n      ],\n    },\n    {\n      name: 'createBot',\n      accounts: [\n        {\n          name: 'gridBotState',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userState',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'baseMint',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'quoteMint',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'clock',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'pair',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'gridBot',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'globalBalanceBaseUser',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'globalBalanceBase',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'globalBalanceQuoteUser',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'globalBalanceQuote',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'depositLimitBase',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'depositLimitQuote',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userBaseTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userQuoteTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'referralRecord',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'associatedTokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'user',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'name',\n          type: 'string',\n        },\n        {\n          name: 'gridType',\n          type: 'u8',\n        },\n        {\n          name: 'gridRate',\n          type: 'u16',\n        },\n        {\n          name: 'gridOffset',\n          type: 'u64',\n        },\n        {\n          name: 'firstBaseAmount',\n          type: 'u64',\n        },\n        {\n          name: 'firstQuoteAmount',\n          type: 'u64',\n        },\n        {\n          name: 'lastBaseAmount',\n          type: 'u64',\n        },\n        {\n          name: 'lastQuoteAmount',\n          type: 'u64',\n        },\n        {\n          name: 'fillBaseOrQuote',\n          type: 'bool',\n        },\n        {\n          name: 'validUntilTime',\n          type: 'u64',\n        },\n        {\n          name: 'entryPrice',\n          type: 'u64',\n        },\n        {\n          name: 'recommenderOp',\n          type: {\n            option: 'publicKey',\n          },\n        },\n      ],\n    },\n    {\n      name: 'closeBot',\n      accounts: [\n        {\n          name: 'gridBotState',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'baseMint',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'quoteMint',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'pair',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'gridBot',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'globalBalanceBaseUser',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'globalBalanceBase',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'globalBalanceQuoteUser',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'globalBalanceQuote',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userBaseTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userQuoteTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'associatedTokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'user',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'closeBotParam',\n          type: {\n            defined: 'CloseBotParam',\n          },\n        },\n      ],\n    },\n    {\n      name: 'createOrders',\n      accounts: [\n        {\n          name: 'gridBotState',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'makerForwardOrder',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'makerReverseOrder',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'associatedTokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'user',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'createOrderParam',\n          type: {\n            defined: 'CreateOrdersParam',\n          },\n        },\n      ],\n    },\n    {\n      name: 'takeOrders',\n      accounts: [\n        {\n          name: 'gridBotState',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'pair',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'clock',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'takerTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'takerBuyTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'makerGridBot',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'makerForwardOrder',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'makerReverseOrder',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'globalBalanceBaseUser',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'globalBalanceBase',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'globalBalanceQuoteUser',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'globalBalanceQuote',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'protocolBalanceBaseRecord',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'protocolBalanceQuoteRecord',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'makerUsers',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'takerSellLimit',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'referralRecord',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'referralBaseFee',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'referralQuoteFee',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'associatedTokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'user',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'takeOrderParam',\n          type: {\n            defined: 'TakeOrdersParam',\n          },\n        },\n      ],\n    },\n    {\n      name: 'claim',\n      accounts: [\n        {\n          name: 'gridBotState',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'baseMint',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'quoteMint',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'gridBot',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'pair',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'globalBalanceBaseUser',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'globalBalanceBase',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'globalBalanceQuoteUser',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'globalBalanceQuote',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userBaseTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userQuoteTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'associatedTokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'user',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'claimParam',\n          type: {\n            defined: 'ClaimParam',\n          },\n        },\n      ],\n    },\n    {\n      name: 'setOwner',\n      accounts: [\n        {\n          name: 'newOwnerId',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'gridBotState',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'user',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'registerGlobalToken',\n      accounts: [\n        {\n          name: 'gridBotState',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'globalBalanceMint',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'globalBalanceUser',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'globalBalance',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'associatedTokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'user',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'registerProtocolToken',\n      accounts: [\n        {\n          name: 'gridBotState',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'mint',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'protocolRecord',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'user',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'registerDepositLimit',\n      accounts: [\n        {\n          name: 'token',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'gridBotState',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'depositLimit',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'user',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'registerPair',\n      accounts: [\n        {\n          name: 'gridBotState',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'pair',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'baseMint',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'quoteMint',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'depositLimitBase',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'depositLimitQuote',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'associatedTokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'user',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'baseMinDeposit',\n          type: 'u64',\n        },\n        {\n          name: 'quoteMinDeposit',\n          type: 'u64',\n        },\n      ],\n    },\n    {\n      name: 'setMinDeposit',\n      accounts: [\n        {\n          name: 'token',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'gridBotState',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'depositLimit',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'user',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'minDeposit',\n          type: 'u64',\n        },\n      ],\n    },\n    {\n      name: 'setProtocolFeeRate',\n      accounts: [\n        {\n          name: 'gridBotState',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'user',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'newProtocolFeeRate',\n          type: 'u32',\n        },\n        {\n          name: 'newTakerFeeRate',\n          type: 'u32',\n        },\n      ],\n    },\n    {\n      name: 'setReferralFeeRate',\n      accounts: [\n        {\n          name: 'gridBotState',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'user',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'newReferralFeeRate',\n          type: 'u32',\n        },\n      ],\n    },\n    {\n      name: 'withdrawProtocolFee',\n      accounts: [\n        {\n          name: 'gridBotState',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'mint',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'toUser',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'protocolBalanceUser',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'protocolBalance',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'user',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'amount',\n          type: 'u64',\n        },\n        {\n          name: 'bump',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'start',\n      accounts: [\n        {\n          name: 'gridBotState',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'user',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'pause',\n      accounts: [\n        {\n          name: 'gridBotState',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'user',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'shutdown',\n      accounts: [\n        {\n          name: 'gridBotState',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'user',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'setMakerUser',\n      accounts: [\n        {\n          name: 'gridBotState',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'makerUsers',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'user',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'makerUser',\n          type: 'publicKey',\n        },\n        {\n          name: 'enable',\n          type: 'bool',\n        },\n      ],\n    },\n  ],\n  accounts: [\n    {\n      name: 'makerUsers',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'users',\n            type: {\n              vec: 'publicKey',\n            },\n          },\n        ],\n      },\n    },\n    {\n      name: 'gridBotState',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'isInitialized',\n            type: 'bool',\n          },\n          {\n            name: 'ownerId',\n            type: 'publicKey',\n          },\n          {\n            name: 'oracleValidTime',\n            type: 'u64',\n          },\n          {\n            name: 'status',\n            type: {\n              defined: 'GridStatus',\n            },\n          },\n          {\n            name: 'protocolFeeRate',\n            docs: ['real_protocol_fee = protocol_fee / 1000000'],\n            type: 'u32',\n          },\n          {\n            name: 'takerFeeRate',\n            type: 'u32',\n          },\n          {\n            name: 'referFeeRate',\n            type: 'u32',\n          },\n          {\n            name: 'nextBotId',\n            docs: ['start from 0, used from 1'],\n            type: 'u64',\n          },\n        ],\n      },\n    },\n    {\n      name: 'userState',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'nextUserBotId',\n            type: 'u32',\n          },\n        ],\n      },\n    },\n    {\n      name: 'dataRecord',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'data',\n            type: 'u64',\n          },\n        ],\n      },\n    },\n    {\n      name: 'referralRecord',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'user',\n            type: 'publicKey',\n          },\n        ],\n      },\n    },\n    {\n      name: 'gridBot',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'isInitialized',\n            type: 'bool',\n          },\n          {\n            name: 'name',\n            type: 'string',\n          },\n          {\n            name: 'active',\n            type: 'bool',\n          },\n          {\n            name: 'user',\n            type: 'publicKey',\n          },\n          {\n            name: 'botId',\n            type: 'u64',\n          },\n          {\n            name: 'closed',\n            type: 'bool',\n          },\n          {\n            name: 'pairId',\n            type: 'string',\n          },\n          {\n            name: 'gridType',\n            type: 'u8',\n          },\n          {\n            name: 'gridSellCount',\n            type: 'u16',\n          },\n          {\n            name: 'gridBuyCount',\n            type: 'u16',\n          },\n          {\n            name: 'gridRate',\n            docs: ['real_grid_rate = grid_rate / 10000'],\n            type: 'u16',\n          },\n          {\n            name: 'gridOffset',\n            type: 'u64',\n          },\n          {\n            name: 'firstBaseAmount',\n            type: 'u64',\n          },\n          {\n            name: 'firstQuoteAmount',\n            type: 'u64',\n          },\n          {\n            name: 'lastBaseAmount',\n            type: 'u64',\n          },\n          {\n            name: 'lastQuoteAmount',\n            type: 'u64',\n          },\n          {\n            name: 'fillBaseOrQuote',\n            type: 'bool',\n          },\n          {\n            name: 'validUntilTime',\n            type: 'u64',\n          },\n          {\n            name: 'totalQuoteAmount',\n            type: 'u64',\n          },\n          {\n            name: 'totalBaseAmount',\n            type: 'u64',\n          },\n          {\n            name: 'revenue',\n            type: 'u64',\n          },\n          {\n            name: 'totalRevenue',\n            type: 'u64',\n          },\n        ],\n      },\n    },\n    {\n      name: 'order',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'tokenSellIsBase',\n            type: 'bool',\n          },\n          {\n            name: 'fillBuyOrSell',\n            type: 'bool',\n          },\n          {\n            name: 'amountSell',\n            type: 'u64',\n          },\n          {\n            name: 'amountBuy',\n            type: 'u64',\n          },\n          {\n            name: 'filled',\n            type: 'u64',\n          },\n        ],\n      },\n    },\n    {\n      name: 'pair',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'baseToken',\n            type: 'publicKey',\n          },\n          {\n            name: 'quoteToken',\n            type: 'publicKey',\n          },\n        ],\n      },\n    },\n    {\n      name: 'accountBalance',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'balance',\n            type: 'u128',\n          },\n        ],\n      },\n    },\n  ],\n  types: [\n    {\n      name: 'GridBotOutput',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'isInitialized',\n            type: 'bool',\n          },\n          {\n            name: 'name',\n            type: 'string',\n          },\n          {\n            name: 'active',\n            type: 'bool',\n          },\n          {\n            name: 'user',\n            type: 'publicKey',\n          },\n          {\n            name: 'botId',\n            type: 'u64',\n          },\n          {\n            name: 'closed',\n            type: 'bool',\n          },\n          {\n            name: 'pairId',\n            type: 'string',\n          },\n          {\n            name: 'gridType',\n            type: 'u8',\n          },\n          {\n            name: 'gridSellCount',\n            type: 'u16',\n          },\n          {\n            name: 'gridBuyCount',\n            type: 'u16',\n          },\n          {\n            name: 'gridRate',\n            docs: ['real_grid_rate = grid_rate / 10000'],\n            type: 'u16',\n          },\n          {\n            name: 'gridOffset',\n            type: 'u64',\n          },\n          {\n            name: 'firstBaseAmount',\n            type: 'u64',\n          },\n          {\n            name: 'firstQuoteAmount',\n            type: 'u64',\n          },\n          {\n            name: 'lastBaseAmount',\n            type: 'u64',\n          },\n          {\n            name: 'lastQuoteAmount',\n            type: 'u64',\n          },\n          {\n            name: 'fillBaseOrQuote',\n            type: 'bool',\n          },\n          {\n            name: 'validUntilTime',\n            type: 'u64',\n          },\n          {\n            name: 'totalQuoteAmount',\n            type: 'u64',\n          },\n          {\n            name: 'totalBaseAmount',\n            type: 'u64',\n          },\n          {\n            name: 'revenue',\n            type: 'u64',\n          },\n          {\n            name: 'totalRevenue',\n            type: 'u64',\n          },\n        ],\n      },\n    },\n    {\n      name: 'PairOutput',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'baseToken',\n            type: 'publicKey',\n          },\n          {\n            name: 'quoteToken',\n            type: 'publicKey',\n          },\n        ],\n      },\n    },\n    {\n      name: 'CloseBotParam',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'userStateId',\n            type: 'u32',\n          },\n          {\n            name: 'globalBaseBump',\n            type: 'u8',\n          },\n          {\n            name: 'globalQuoteBump',\n            type: 'u8',\n          },\n        ],\n      },\n    },\n    {\n      name: 'ClaimParam',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'userStateId',\n            type: 'u32',\n          },\n          {\n            name: 'globalBaseBump',\n            type: 'u8',\n          },\n          {\n            name: 'globalQuoteBump',\n            type: 'u8',\n          },\n        ],\n      },\n    },\n    {\n      name: 'TakeOrdersParam',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'baseMint',\n            type: 'publicKey',\n          },\n          {\n            name: 'quoteMint',\n            type: 'publicKey',\n          },\n          {\n            name: 'makerKey',\n            type: 'publicKey',\n          },\n          {\n            name: 'makerUserStateId',\n            type: 'u32',\n          },\n          {\n            name: 'makerLevel',\n            type: 'u16',\n          },\n          {\n            name: 'makerForwardOrReverse',\n            type: 'bool',\n          },\n          {\n            name: 'tokenSell',\n            type: 'publicKey',\n          },\n          {\n            name: 'tokenBuy',\n            type: 'publicKey',\n          },\n          {\n            name: 'amountSell',\n            type: 'u64',\n          },\n          {\n            name: 'amountBuy',\n            type: 'u64',\n          },\n          {\n            name: 'fillBuyOrSell',\n            type: 'bool',\n          },\n          {\n            name: 'globalBaseBump',\n            type: 'u8',\n          },\n          {\n            name: 'globalQuoteBump',\n            type: 'u8',\n          },\n        ],\n      },\n    },\n    {\n      name: 'CreateOrdersParam',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'makerKey',\n            type: 'publicKey',\n          },\n          {\n            name: 'makerUserStateId',\n            type: 'u32',\n          },\n          {\n            name: 'makerLevel',\n            type: 'u16',\n          },\n        ],\n      },\n    },\n    {\n      name: 'GridStatus',\n      type: {\n        kind: 'enum',\n        variants: [\n          {\n            name: 'Running',\n          },\n          {\n            name: 'Paused',\n          },\n          {\n            name: 'Shutdown',\n          },\n        ],\n      },\n    },\n  ],\n  events: [\n    {\n      name: 'RegisterPairEvent',\n      fields: [\n        {\n          name: 'baseToken',\n          type: 'publicKey',\n          index: false,\n        },\n        {\n          name: 'quoteToken',\n          type: 'publicKey',\n          index: false,\n        },\n      ],\n    },\n    {\n      name: 'CreateEvent',\n      fields: [\n        {\n          name: 'accountId',\n          type: 'publicKey',\n          index: false,\n        },\n        {\n          name: 'botId',\n          type: 'string',\n          index: false,\n        },\n        {\n          name: 'userStateId',\n          type: 'string',\n          index: false,\n        },\n        {\n          name: 'basePrice',\n          type: 'string',\n          index: false,\n        },\n        {\n          name: 'quotePrice',\n          type: 'string',\n          index: false,\n        },\n        {\n          name: 'baseExpo',\n          type: 'string',\n          index: false,\n        },\n        {\n          name: 'quoteExpo',\n          type: 'string',\n          index: false,\n        },\n        {\n          name: 'entryPrice',\n          type: 'u64',\n          index: false,\n        },\n        {\n          name: 'pair',\n          type: {\n            defined: 'PairOutput',\n          },\n          index: false,\n        },\n        {\n          name: 'gridBot',\n          type: {\n            defined: 'GridBotOutput',\n          },\n          index: false,\n        },\n      ],\n    },\n    {\n      name: 'CloseEvent',\n      fields: [\n        {\n          name: 'accountId',\n          type: 'publicKey',\n          index: false,\n        },\n        {\n          name: 'botId',\n          type: 'string',\n          index: false,\n        },\n        {\n          name: 'userStateId',\n          type: 'string',\n          index: false,\n        },\n        {\n          name: 'refund',\n          type: 'u64',\n          index: false,\n        },\n      ],\n    },\n    {\n      name: 'OrderUpdateEvent',\n      fields: [\n        {\n          name: 'botId',\n          type: 'string',\n          index: false,\n        },\n        {\n          name: 'userStateId',\n          type: 'string',\n          index: false,\n        },\n        {\n          name: 'forwardOrReverse',\n          type: 'bool',\n          index: false,\n        },\n        {\n          name: 'level',\n          type: 'u16',\n          index: false,\n        },\n        {\n          name: 'tokenSell',\n          type: 'publicKey',\n          index: false,\n        },\n        {\n          name: 'tokenBuy',\n          type: 'publicKey',\n          index: false,\n        },\n        {\n          name: 'amountSell',\n          type: 'u64',\n          index: false,\n        },\n        {\n          name: 'amountBuy',\n          type: 'u64',\n          index: false,\n        },\n        {\n          name: 'fillBuyOrSell',\n          type: 'bool',\n          index: false,\n        },\n        {\n          name: 'filled',\n          type: 'u64',\n          index: false,\n        },\n      ],\n    },\n    {\n      name: 'TakeOrderEvent',\n      fields: [\n        {\n          name: 'taker',\n          type: 'publicKey',\n          index: false,\n        },\n        {\n          name: 'maker',\n          type: 'publicKey',\n          index: false,\n        },\n        {\n          name: 'makerBotId',\n          type: 'string',\n          index: false,\n        },\n        {\n          name: 'makerUserStateId',\n          type: 'string',\n          index: false,\n        },\n        {\n          name: 'makerForwardOrReverse',\n          type: 'bool',\n          index: false,\n        },\n        {\n          name: 'makerLevel',\n          type: 'u16',\n          index: false,\n        },\n        {\n          name: 'tookSell',\n          type: 'u64',\n          index: false,\n        },\n        {\n          name: 'tookBuy',\n          type: 'u64',\n          index: false,\n        },\n        {\n          name: 'takerFee',\n          type: 'u64',\n          index: false,\n        },\n        {\n          name: 'protocolFee',\n          type: 'u64',\n          index: false,\n        },\n        {\n          name: 'referralFee',\n          type: 'u64',\n          index: false,\n        },\n        {\n          name: 'currentRevenue',\n          type: 'u64',\n          index: false,\n        },\n        {\n          name: 'makerLeftRevenue',\n          type: 'u64',\n          index: false,\n        },\n        {\n          name: 'makerTotalRevenue',\n          type: 'u64',\n          index: false,\n        },\n      ],\n    },\n    {\n      name: 'WithdrawEvent',\n      fields: [\n        {\n          name: 'from',\n          type: 'publicKey',\n          index: false,\n        },\n        {\n          name: 'to',\n          type: 'publicKey',\n          index: false,\n        },\n        {\n          name: 'amount',\n          type: 'u64',\n          index: false,\n        },\n        {\n          name: 'tokenId',\n          type: 'publicKey',\n          index: false,\n        },\n      ],\n    },\n    {\n      name: 'ReferralEvent',\n      fields: [\n        {\n          name: 'user',\n          type: 'publicKey',\n          index: false,\n        },\n        {\n          name: 'recommender',\n          type: 'publicKey',\n          index: false,\n        },\n        {\n          name: 'amount',\n          type: 'u64',\n          index: false,\n        },\n        {\n          name: 'tokenId',\n          type: 'publicKey',\n          index: false,\n        },\n      ],\n    },\n    {\n      name: 'TransferEvent',\n      fields: [\n        {\n          name: 'from',\n          type: 'publicKey',\n          index: false,\n        },\n        {\n          name: 'to',\n          type: 'publicKey',\n          index: false,\n        },\n        {\n          name: 'amount',\n          type: 'u64',\n          index: false,\n        },\n        {\n          name: 'tokenId',\n          type: 'publicKey',\n          index: false,\n        },\n      ],\n    },\n    {\n      name: 'ClaimEvent',\n      fields: [\n        {\n          name: 'claimUser',\n          type: 'publicKey',\n          index: false,\n        },\n        {\n          name: 'botId',\n          type: 'string',\n          index: false,\n        },\n        {\n          name: 'userStateId',\n          type: 'string',\n          index: false,\n        },\n        {\n          name: 'user',\n          type: 'publicKey',\n          index: false,\n        },\n        {\n          name: 'revenueToken',\n          type: 'publicKey',\n          index: false,\n        },\n        {\n          name: 'revenue',\n          type: 'u64',\n          index: false,\n        },\n      ],\n    },\n  ],\n  errors: [\n    {\n      code: 6000,\n      name: 'InvalidProgramId',\n      msg: 'InvalidProgramId',\n    },\n    {\n      code: 6001,\n      name: 'UnexpectedAccount',\n      msg: 'UnexpectedAccount',\n    },\n    {\n      code: 6002,\n      name: 'Initialized',\n      msg: 'Initialized',\n    },\n    {\n      code: 6003,\n      name: 'NotAllowed',\n      msg: 'NotAllowed',\n    },\n    {\n      code: 6004,\n      name: 'InvalidToken',\n      msg: 'InvalidToken',\n    },\n    {\n      code: 6005,\n      name: 'InvalidOracleId',\n      msg: 'InvalidOracleId',\n    },\n    {\n      code: 6006,\n      name: 'HadShutdown',\n      msg: 'HadShutdown',\n    },\n    {\n      code: 6007,\n      name: 'InvalidFeeRate',\n      msg: 'InvalidFeeRate',\n    },\n    {\n      code: 6008,\n      name: 'InvalidAmount',\n      msg: 'InvalidAmount',\n    },\n    {\n      code: 6009,\n      name: 'InvalidUntilTime',\n      msg: 'InvalidUntilTime',\n    },\n    {\n      code: 6010,\n      name: 'InvalidPair',\n      msg: 'InvalidPair',\n    },\n    {\n      code: 6011,\n      name: 'PauseOrShutdown',\n      msg: 'PauseOrShutdown',\n    },\n    {\n      code: 6012,\n      name: 'MoreThanMaxGridCount',\n      msg: 'MoreThanMaxGridCount',\n    },\n    {\n      code: 6013,\n      name: 'LessThanMinGridCount',\n      msg: 'LessThanMinGridCount',\n    },\n    {\n      code: 6014,\n      name: 'InvalidFirstOrLastAmount',\n      msg: 'InvalidFirstOrLastAmount',\n    },\n    {\n      code: 6015,\n      name: 'BaseTooSmall',\n      msg: 'BaseTooSmall',\n    },\n    {\n      code: 6016,\n      name: 'QuoteTooSmall',\n      msg: 'QuoteTooSmall',\n    },\n    {\n      code: 6017,\n      name: 'LessBaseToken',\n      msg: 'LessBaseToken',\n    },\n    {\n      code: 6018,\n      name: 'LessQuoteToken',\n      msg: 'LessQuoteToken',\n    },\n    {\n      code: 6019,\n      name: 'InvalidBotStatus',\n      msg: 'InvalidBotStatus',\n    },\n    {\n      code: 6020,\n      name: 'InvalidUser',\n      msg: 'InvalidUser',\n    },\n    {\n      code: 6021,\n      name: 'InvalidOrderAmount',\n      msg: 'InvalidOrderAmount',\n    },\n    {\n      code: 6022,\n      name: 'LessTokenSell',\n      msg: 'LessTokenSell',\n    },\n    {\n      code: 6023,\n      name: 'InvalidOrderToken',\n      msg: 'InvalidOrderToken',\n    },\n    {\n      code: 6024,\n      name: 'BotClosed',\n      msg: 'BotClosed',\n    },\n    {\n      code: 6025,\n      name: 'BotDisable',\n      msg: 'BotDisable',\n    },\n    {\n      code: 6026,\n      name: 'BotExpired',\n      msg: 'BotExpired',\n    },\n    {\n      code: 6027,\n      name: 'InvalidMakerForwardOrReverse',\n      msg: 'InvalidMakerForwardOrReverse',\n    },\n    {\n      code: 6028,\n      name: 'InvalidOrderMatching',\n      msg: 'InvalidOrderMatching',\n    },\n    {\n      code: 6029,\n      name: 'InvalidName',\n      msg: 'InvalidName',\n    },\n    {\n      code: 6030,\n      name: 'OrderPriceNotMatch',\n      msg: 'OrderPriceNotMatch',\n    },\n  ],\n};\n", "export const SOLANA_MIN_DEPOSIT = {\n  SOL: 0.16,\n  // SOL: 0.01,\n  WSOL: 0.16,\n  JUP: 30,\n  WBTC: 0.00035,\n  WETH: 0.0084,\n  RAY: 13.5,\n  Bonk: 1200000,\n  Moutai: 3000,\n  $WIF: 13.5,\n  mSOL: 0.125,\n  ORCA: 11.5,\n  KMNO: 520,\n  CIGGS: 80000,\n  BUTT: 24000,\n};\n", "import { PaginationParams } from '@/services';\nimport { botServices, marketServices } from '@/services/bot';\nimport { globalState } from '@/stores';\n\nexport interface MyVaultsParams extends PaginationParams {\n  status?: 'position' | 'history';\n  pairId?: string;\n  orderBy?: string;\n  dir?: 'asc' | 'desc';\n}\n\nexport async function getMyGridVaults(params: MyVaultsParams) {\n  const res = await botServices.query('grid', transformMyVaultListParams(params));\n  return res;\n}\n\nexport async function getMySwingVaults(params: MyVaultsParams) {\n  const res = await botServices.query('swing', transformMyVaultListParams(params));\n  return res;\n}\n\nexport async function getMyDCAVaults(params: MyVaultsParams) {\n  const res = await botServices.query('dca', transformMyVaultListParams(params));\n  return res;\n}\n\nfunction transformMyVaultListParams(params: MyVaultsParams) {\n  const { orderBy, dir, pairId, status, page, pageSize } = params;\n  return {\n    account_id: globalState.get('accountId'),\n    status,\n    pair_id: pairId,\n    order_by: orderBy,\n    dir,\n    page,\n    pageSize,\n  };\n}\n\nexport interface MarketVaultsParams extends PaginationParams {\n  orderBy?: string;\n  dir?: 'asc' | 'desc';\n  pairId?: string;\n  accountId?: string;\n}\n\nexport async function getMarketGridVaults(params: MarketVaultsParams) {\n  const res = await marketServices.queryAllBots({\n    bot_type: 'grid',\n    ...transformMarketVaultListParams(params),\n  });\n  return (res || {}) as { list?: BotModel.MarketBot<'grid'>[]; has_next_page: boolean };\n}\n\nexport async function getMarketSwingVaults(params: MarketVaultsParams) {\n  const res = await marketServices.queryAllBots({\n    bot_type: 'swing',\n    ...transformMarketVaultListParams(params),\n  });\n  return (res || {}) as { list?: BotModel.MarketBot<'swing'>[]; has_next_page: boolean };\n}\n\nexport async function getMarketDCAVaults(params: MarketVaultsParams) {\n  const res = await marketServices.queryAllBots({\n    bot_type: 'dca',\n    ...transformMarketVaultListParams(params),\n  });\n  return (res || {}) as { list?: BotModel.MarketBot<'dca'>[]; has_next_page: boolean };\n}\n\nfunction transformMarketVaultListParams(params: MarketVaultsParams) {\n  const { orderBy, dir, pairId, accountId, page, pageSize } = params;\n  return {\n    order_by: orderBy,\n    dir,\n    pair_id: pairId,\n    account_id: accountId,\n    page,\n    pageSize,\n  };\n}\n", "import { contractServices } from '@/services/contract';\nimport {\n  BotContractServices,\n  botContractServices,\n  botNearContractServices,\n  botSolanaContractServices,\n} from '@/services/bot/contract';\nimport Big from 'big.js';\nimport { pairServices } from '@/services/token';\nimport { globalState } from '@/stores';\n\nexport interface NewToken extends BotModel.Token {\n  refreshTime?: number;\n}\n\nexport interface AccountAssetsResponse {\n  tokens: NewToken[];\n  balanceMap: Record<string, string>;\n  totalBalancePrice: string;\n  totalInternalBalancePrice: string;\n  totalPrice: string;\n}\n\nexport async function getAccountAssets(): Promise<AccountAssetsResponse> {\n  const tokens: NewToken[] = await fetchTokens();\n  const balanceMap = await fetchBalances(tokens);\n  const internalBalanceMap = await fetchInternalBalances(tokens);\n  const priceMap = (await pairServices.queryPrice()) || {};\n\n  const totalBalancePrice = calculateTotalPrice(balanceMap, priceMap);\n  const totalInternalBalancePrice = calculateTotalPrice(internalBalanceMap, priceMap);\n  const totalPrice = new Big(totalBalancePrice).plus(totalInternalBalancePrice).toString();\n\n  return {\n    tokens,\n    balanceMap,\n    totalBalancePrice,\n    totalInternalBalancePrice,\n    totalPrice,\n  };\n}\n\nexport async function withdrawAccountAsset<ChainType extends Chain>(\n  token: NewToken,\n): Promise<ReturnType<BotContractServices<ChainType>['withdraw']>> {\n  const chain = globalState.get('chain');\n  const trans =\n    chain === 'near'\n      ? botNearContractServices.withdraw(token.code)\n      : botSolanaContractServices.withdraw(token.code);\n  return trans as ReturnType<BotContractServices<ChainType>['withdraw']>;\n}\n\nasync function fetchTokens(): Promise<NewToken[]> {\n  const res = await pairServices.query();\n  return (\n    res?.reduce((acc: NewToken[], cur) => {\n      if (!acc.some((item) => item.code === cur.base_token.code)) acc.push(cur.base_token);\n      if (!acc.some((item) => item.code === cur.quote_token.code)) acc.push(cur.quote_token);\n      return acc;\n    }, []) || []\n  );\n}\n\nasync function fetchBalances(tokens: NewToken[]): Promise<Record<string, string>> {\n  const res = await Promise.all(\n    tokens.map(async (token) => {\n      const balance = await contractServices.getBalance(token.code);\n      return { code: token.code, balance };\n    }),\n  );\n  return res.reduce(\n    (acc, cur) => {\n      acc[cur.code] = cur.balance;\n      return acc;\n    },\n    {} as Record<string, string>,\n  );\n}\n\nasync function fetchInternalBalances(tokens: NewToken[]): Promise<Record<string, string>> {\n  const res = await Promise.all(\n    tokens.map(async (token) => {\n      const balance = await botContractServices.queryUserBalance(token.code, token.decimals);\n      return { code: token.code, balance: balance || '0' };\n    }),\n  );\n  return res.reduce(\n    (acc, cur) => {\n      acc[cur.code] = cur.balance;\n      return acc;\n    },\n    {} as Record<string, string>,\n  );\n}\n\nfunction calculateTotalPrice(\n  balanceMap: Record<string, string>,\n  priceMap: Record<string, string>,\n): string {\n  return Object.entries(balanceMap).reduce((acc, [code, balance]) => {\n    const price = priceMap[code] || 0;\n    return new Big(acc).plus(new Big(balance || 0).times(price)).toString();\n  }, '0');\n}\n", "import { marketServices } from '@/services/bot';\n\nexport async function getMarketInfo() {\n  const res = await marketServices.querySummary();\n  return res;\n}\n", "import { globalState } from '@/stores';\n\nexport async function generateReferralUrl() {\n  const accountId = globalState.get('accountId');\n  const chain = globalState.get('chain');\n  const network = globalState.get('network');\n  if (!accountId) throw new Error('Please set accountId before generating referral url');\n  const host = network === 'mainnet' ? 'https://www.deltatrade.ai' : 'https://dev.deltabot.vip/';\n  return `${host}?ref=${accountId}&chain=${chain}`;\n}\n", "import {\n  BotContractServices,\n  botNearContractServices,\n  botSolanaContractServices,\n  DCABotContractParams,\n} from '@/services/bot/contract';\nimport { pairServices } from '@/services/token';\nimport { globalState } from '@/stores';\nimport { formatNumber } from '@/utils/format';\nimport Big from 'big.js';\nimport { validateAccountId, getPair, getMinDeposit, getPairPrice } from '.';\n\n/**\n * Parameters for creating a DCA vault.\n */\nexport interface CreateDCAVaultParams {\n  /** The ID of the trading pair */\n  pairId: string;\n  /** The type of trade, either buying or selling */\n  tradeType: 'buy' | 'sell';\n  /** The start time for the DCA strategy */\n  startTime: number;\n  /** The time interval between trades */\n  intervalTime: number;\n  /** The amount of the base token to trade in each interval */\n  singleAmountIn: number;\n  /** The total number of trades to execute */\n  count: number;\n  /** The name of the DCA vault */\n  name: string;\n  /** The acceptable slippage for the trade */\n  slippage?: number;\n  /** The lowest price to buy at (for buy trades) */\n  lowestPrice?: number;\n  /** The highest price to sell at (for sell trades) */\n  highestPrice?: number;\n  /** An optional recommender ID */\n  recommender?: string;\n}\n\nexport async function validateDCAVaultParams(params: CreateDCAVaultParams) {\n  validateAccountId();\n  const errors: { [key: string]: string[] } = {};\n  const pair = await getPair(params.pairId);\n  if (!pair) errors.pair = ['Pair not found'];\n  if (!params.count) errors.count = ['Count is required'];\n  if (!params.singleAmountIn) errors.singleAmountIn = ['Single amount in is required'];\n  if (!params.startTime) errors.startTime = ['Start time is required'];\n  if (!params.intervalTime) errors.intervalTime = ['Interval time is required'];\n  if (params.slippage && (params.slippage < 0 || params.slippage > 100))\n    errors.slippage = ['Slippage must be between 0 and 100'];\n  if (\n    params.lowestPrice &&\n    params.highestPrice &&\n    new Big(params.lowestPrice).gt(params.highestPrice)\n  ) {\n    errors.price = ['Lowest price must be less than highest price'];\n  }\n\n  const pairPrice = await getPairPrice(params.pairId);\n  if (params.lowestPrice && new Big(params.lowestPrice).gt(pairPrice)) {\n    errors.lowestPrice = ['Lowest price is greater than current price'];\n  }\n  if (params.highestPrice && new Big(params.highestPrice).lt(pairPrice)) {\n    errors.highestPrice = ['Highest price is less than current price'];\n  }\n  const minDeposit = await getDCAMinDeposit(params);\n  const tokenInSymbol = params.tradeType === 'buy' ? pair?.base_token : pair?.quote_token;\n  if (minDeposit && new Big(params.singleAmountIn || 0).lt(minDeposit)) {\n    errors.singleAmountIn = [\n      `The initial investment cannot be less than ${formatNumber(minDeposit, {\n        maximumFractionDigits: 6,\n      })} ${tokenInSymbol}`,\n    ];\n  }\n\n  if (Object.keys(errors).length > 0) {\n    return errors;\n  }\n}\n\nexport async function getDCAMinDeposit(params: Pick<CreateDCAVaultParams, 'pairId' | 'tradeType'>) {\n  const { minBaseDeposit, minQuoteDeposit } = await getMinDeposit(params.pairId, 'dca');\n  if (params.tradeType === 'buy') return minQuoteDeposit;\n  return minBaseDeposit;\n}\n\nexport async function getDCATotalInvestment(params: CreateDCAVaultParams) {\n  const { tradeType, singleAmountIn, count } = params;\n  if (!count || !singleAmountIn || !tradeType) return;\n  const totalInvestment = new Big(singleAmountIn).times(count).toString();\n  const totalBaseInvestment = tradeType === 'sell' ? totalInvestment : '0';\n  const totalQuoteInvestment = tradeType === 'buy' ? totalInvestment : '0';\n\n  return {\n    totalBaseInvestment,\n    totalQuoteInvestment,\n  };\n}\n\nexport async function createDCAVault<ChainType extends Chain>(\n  params: CreateDCAVaultParams,\n): Promise<ReturnType<BotContractServices<ChainType>['createDCABot']>> {\n  const errors = await validateDCAVaultParams(params);\n  if (errors) throw new Error(JSON.stringify(errors));\n  const _params = await transformDCAVaultParams(params);\n\n  const chain = globalState.get('chain') as ChainType;\n  const trans = await (chain === 'near'\n    ? botNearContractServices.createDCABot(_params)\n    : botSolanaContractServices.createDCABot(_params));\n\n  return trans as ReturnType<BotContractServices<ChainType>['createDCABot']>;\n}\n\nexport async function claimDCAVault<ChainType extends Chain>(params: {\n  botId: string;\n}): Promise<ReturnType<BotContractServices<ChainType>['claimDCABot']>> {\n  const chain = globalState.get('chain') as ChainType;\n  const trans =\n    chain === 'near'\n      ? botNearContractServices.claimDCABot(params.botId)\n      : botSolanaContractServices.claimDCABot(params.botId);\n  return trans as ReturnType<BotContractServices<ChainType>['claimDCABot']>;\n}\n\nexport async function closeDCAVault<ChainType extends Chain>(params: {\n  botId: string;\n}): Promise<ReturnType<BotContractServices<ChainType>['closeDCABot']>> {\n  const chain = globalState.get('chain') as ChainType;\n  const trans =\n    chain === 'near'\n      ? botNearContractServices.closeDCABot(params.botId)\n      : botSolanaContractServices.closeDCABot(params.botId);\n  return trans as ReturnType<BotContractServices<ChainType>['closeDCABot']>;\n}\n\nasync function transformDCAVaultParams(params: CreateDCAVaultParams) {\n  const pair = await getPair(params.pairId);\n  if (!pair) throw new Error('Pair not found');\n  const tokenIn = params.tradeType === 'buy' ? pair.base_token : pair.quote_token;\n  const tokenOut = params.tradeType === 'buy' ? pair.quote_token : pair.base_token;\n  const lowestPrice =\n    params.tradeType === 'buy'\n      ? params.lowestPrice\n      : params.highestPrice\n        ? new Big(1).div(params.highestPrice)\n        : undefined;\n  const highestPrice =\n    params.tradeType === 'buy'\n      ? params.highestPrice\n      : params.lowestPrice\n        ? new Big(1).div(params.lowestPrice)\n        : undefined;\n  const { totalBaseInvestment, totalQuoteInvestment } = (await getDCATotalInvestment(params)) || {};\n  const formattedParams = {\n    name: params.name,\n    token_in: tokenIn,\n    token_out: tokenOut,\n    single_amount_in: params.singleAmountIn,\n    start_time: params.startTime,\n    interval_time: params.intervalTime,\n    count: params.count,\n    lowest_price: lowestPrice,\n    highest_price: highestPrice,\n    slippage: params.slippage || 0.5,\n    recommender: params.recommender || undefined,\n    base_token: pair.base_token,\n    quote_token: pair.quote_token,\n    total_base_investment: totalBaseInvestment,\n    total_quote_investment: totalQuoteInvestment,\n  } as unknown as DCABotContractParams;\n\n  return { ...formattedParams };\n}\n", "import { botContractServices } from '@/services/bot/contract';\nimport { pairServices } from '@/services/token';\nimport { globalState } from '@/stores';\n\nexport function validateAccountId() {\n  if (!globalState.get('accountId'))\n    throw new Error('Please set accountId before creating a vault');\n}\n\nexport async function getPair(pairId: string) {\n  const pairs = await pairServices.query();\n  const pair = pairs.find((p) => p.pair_id === pairId);\n  return pair;\n}\n\nexport async function getPairPrice(pairId: string) {\n  const pairPriceRes = await pairServices.queryPairPrice(pairId);\n  const { pairPrice: entryPrice } = pairPriceRes[pairId] || {};\n  return entryPrice;\n}\n\nexport async function getMinDeposit(pairId: string, type: BotModel.BotType) {\n  const pair = await getPair(pairId);\n  if (!pair) throw new Error('Pair not found');\n  const minBaseDeposit = await botContractServices.queryMinDeposit(type, pair.base_token);\n  const minQuoteDeposit = await botContractServices.queryMinDeposit(type, pair.quote_token);\n  return { minBaseDeposit, minQuoteDeposit };\n}\n", "import {\n  BotContractServices,\n  botNearContractServices,\n  botSolanaContractServices,\n  GridBotContractParams,\n} from '@/services/bot/contract';\nimport { pairServices } from '@/services/token';\nimport { globalState } from '@/stores';\nimport { parseDisplayAmount } from '@/utils/format';\nimport Big from 'big.js';\nimport { validateAccountId, getPair, getMinDeposit, getPairPrice } from '.';\n\nexport interface CreateGridVaultParams {\n  pairId: string;\n  minPrice: string;\n  maxPrice: string;\n  gridAmount: number;\n  quantityPreGrid: string;\n  name: string;\n  validityPeriod?: number;\n  slippage?: number;\n  recommender?: string;\n}\n\nexport async function validateGridVaultParams(params: CreateGridVaultParams) {\n  validateAccountId();\n  const errors: { [key: string]: string[] } = {};\n  const pair = await getPair(params.pairId);\n  if (!pair) errors.pair = ['Pair not found'];\n  if (!params.minPrice) errors.minPrice = ['Min price is required'];\n  if (!params.maxPrice) errors.maxPrice = ['Max price is required'];\n  if (!params.gridAmount) errors.gridAmount = ['Grid amount is required'];\n  if (!params.quantityPreGrid) errors.quantityPreGrid = ['Quantity pre grid is required'];\n  if (params.slippage && (params.slippage < 0 || params.slippage > 100))\n    errors.slippage = ['Slippage must be between 0 and 100'];\n  if (!params.name) errors.name = ['Name is required'];\n  if (new Big(params.minPrice).gte(params.maxPrice))\n    errors.price = ['Min price must be less than max price'];\n  if (Object.keys(errors).length > 0) {\n    return errors;\n  }\n}\n\nexport async function getGridTotalInvestment(params: CreateGridVaultParams) {\n  const { minPrice, maxPrice, gridAmount, quantityPreGrid } = params;\n  if (!minPrice || !maxPrice || !gridAmount || !quantityPreGrid) return;\n  const entryPrice = await getPairPrice(params.pairId);\n  const roundDecimals = 6;\n  const gridInfo: {\n    buy: Big[];\n    sell: Big[];\n    wait: Big[];\n  } = {\n    buy: [],\n    sell: [],\n    wait: [],\n  };\n\n  const gridSpacing = new Big(maxPrice).minus(minPrice).div(gridAmount);\n\n  for (let i = 0; i <= Number(gridAmount); i++) {\n    const gridPrice = new Big(minPrice).plus(gridSpacing.times(i));\n    if (new Big(minPrice).gt(gridPrice)) {\n      gridInfo.buy.push(gridPrice);\n    } else {\n      gridInfo.sell.push(gridPrice);\n    }\n  }\n\n  if (!gridInfo.buy.length && gridInfo.sell.length) {\n    gridInfo.wait.push(gridInfo.sell.shift()!);\n  } else if (!gridInfo.sell.length && gridInfo.buy.length) {\n    gridInfo.wait.push(gridInfo.buy.pop()!);\n  } else {\n    const upperDiff = new Big(gridInfo.sell[0]).minus(entryPrice);\n    const lowerDiff = new Big(entryPrice).minus(gridInfo.buy[gridInfo.buy.length - 1]);\n    gridInfo.wait.push(upperDiff.gt(lowerDiff) ? gridInfo.buy.pop()! : gridInfo.sell.shift()!);\n  }\n\n  const baseInvestmentPerGrid = new Big(quantityPreGrid || 0);\n  if (baseInvestmentPerGrid.eq(0)) return;\n\n  const gridOffset = gridSpacing\n    .div(new Big(1).div(baseInvestmentPerGrid))\n    .round(roundDecimals, Big.roundUp)\n    .toString();\n  const firstBaseAmount = baseInvestmentPerGrid.round(roundDecimals, Big.roundUp).toString();\n  const lastBaseAmount = firstBaseAmount;\n\n  const firstQuoteAmount = baseInvestmentPerGrid\n    .times(minPrice)\n    .round(roundDecimals, Big.roundUp)\n    .toString();\n  const lastQuoteAmount = new Big(firstQuoteAmount)\n    .plus(new Big(gridOffset).times(gridAmount))\n    .round(roundDecimals, Big.roundUp)\n    .toString();\n\n  const gridBuyCount = gridInfo.buy.length;\n  const gridSellCount = gridInfo.sell.length;\n\n  const totalBaseInvestment = new Big(firstBaseAmount).times(gridSellCount).toString();\n  const totalQuoteInvestment = new Big(firstQuoteAmount)\n    .times(gridBuyCount)\n    .plus(\n      new Big(gridOffset || 0)\n        .times(gridBuyCount - 1)\n        .times(gridBuyCount)\n        .div(2),\n    )\n    .toString();\n\n  return {\n    gridOffset,\n    firstBaseAmount,\n    lastBaseAmount,\n    firstQuoteAmount,\n    lastQuoteAmount,\n    gridBuyCount,\n    gridSellCount,\n    totalBaseInvestment,\n    totalQuoteInvestment,\n    entryPrice,\n    gridInfo,\n  };\n}\n\nexport async function getGridMinDeposit(params: CreateGridVaultParams) {\n  const { minPrice, maxPrice } = params;\n  const { minBaseDeposit, minQuoteDeposit } = await getMinDeposit(params.pairId, 'grid');\n  if (new Big(minPrice || 0).eq(0) || new Big(maxPrice || 0).eq(0))\n    return minBaseDeposit.toString() || '0';\n  const result = Math.max(\n    Number(minBaseDeposit || '0'),\n    new Big(minQuoteDeposit || '0').div(minPrice).toNumber(),\n  );\n  const pair = await getPair(params.pairId);\n  return parseDisplayAmount(result, pair?.base_token.symbol!, { rm: Big.roundUp });\n}\n\nexport async function createGridVault<ChainType extends Chain>(\n  params: CreateGridVaultParams,\n): Promise<ReturnType<BotContractServices<ChainType>['createGridBot']>> {\n  const errors = await validateGridVaultParams(params);\n  if (errors) throw new Error(JSON.stringify(errors));\n  const _params = await transformGridVaultParams(params);\n  const chain = globalState.get('chain') as ChainType;\n  const trans = await (chain === 'near'\n    ? botNearContractServices.createGridBot({ ..._params, type: 'grid' })\n    : botSolanaContractServices.createGridBot({ ..._params, type: 'grid' }));\n  return trans as ReturnType<BotContractServices<ChainType>['createGridBot']>;\n}\n\nasync function transformGridVaultParams(params: CreateGridVaultParams) {\n  const pair = await getPair(params.pairId);\n  if (!pair) throw new Error('Pair not found');\n  const {\n    gridOffset,\n    firstBaseAmount,\n    lastBaseAmount,\n    firstQuoteAmount,\n    lastQuoteAmount,\n    totalBaseInvestment,\n    totalQuoteInvestment,\n    gridBuyCount,\n    gridSellCount,\n    entryPrice,\n  } = (await getGridTotalInvestment(params)) || {};\n  const formattedParams = {\n    grid_buy_count: gridBuyCount,\n    grid_sell_count: gridSellCount,\n    grid_type: 'EqOffset',\n    grid_offset: gridOffset,\n    slippage: params.slippage || 1,\n    fill_base_or_quote: true,\n    first_base_amount: firstBaseAmount,\n    last_base_amount: lastBaseAmount,\n    first_quote_amount: firstQuoteAmount,\n    last_quote_amount: lastQuoteAmount,\n    name: params.name,\n    base_token: pair.base_token,\n    quote_token: pair.quote_token,\n    total_base_investment: totalBaseInvestment,\n    total_quote_investment: totalQuoteInvestment,\n    pair_id: pair.pair_id,\n    entry_price: entryPrice,\n    take_profit_price: undefined,\n    trigger_price: undefined,\n    stop_loss_price: undefined,\n  } as GridBotContractParams;\n  return { ...formattedParams };\n}\n\nexport async function claimGridVault<ChainType extends Chain>(params: {\n  botId: number;\n}): Promise<ReturnType<BotContractServices<ChainType>['claimGridBot']>> {\n  const chain = globalState.get('chain') as ChainType;\n  const trans =\n    chain === 'near'\n      ? botNearContractServices.claimGridBot(params.botId)\n      : botSolanaContractServices.claimGridBot(params.botId);\n  return trans as ReturnType<BotContractServices<ChainType>['claimGridBot']>;\n}\n\nexport async function closeGridVault<ChainType extends Chain>(params: {\n  botId: number;\n}): Promise<ReturnType<BotContractServices<ChainType>['closeGridBot']>> {\n  const chain = globalState.get('chain') as ChainType;\n  const trans =\n    chain === 'near'\n      ? botNearContractServices.closeGridBot(params.botId)\n      : botSolanaContractServices.closeGridBot(params.botId);\n  return trans as ReturnType<BotContractServices<ChainType>['closeGridBot']>;\n}\n", "import {\n  BotContractServices,\n  botNearContractServices,\n  botSolanaContractServices,\n  GridBotContractParams,\n} from '@/services/bot/contract';\nimport { globalState } from '@/stores';\nimport { parseDisplayAmount, parseDisplayPrice } from '@/utils/format';\nimport Big from 'big.js';\nimport { validateAccountId, getPair, getMinDeposit, getPairPrice } from '.';\n\nexport interface CreateClassicSwingVaultParams {\n  pairId: string;\n  tradeType: 'buy' | 'sell';\n  buyPrice: string;\n  sellPrice: string;\n  everyPhasedAmount: string;\n  name: string;\n  validityPeriod?: number;\n  slippage?: number;\n  recommender?: string;\n}\n\nexport interface CreatePhasedSwingVaultParams {\n  pairId: string;\n  tradeType: 'buy' | 'sell';\n  gridAmount: number;\n  intervalPrice: string;\n  everyPhasedAmount: string;\n  highestBuyPrice?: string;\n  lowestSellPrice?: string;\n  name: string;\n  validityPeriod?: number;\n  slippage?: number;\n  recommender?: string;\n}\n\nexport type SwingVaultType = 'classic' | 'phased';\n\nexport type CreateSwingVaultParams<T extends SwingVaultType> = T extends 'classic'\n  ? CreateClassicSwingVaultParams\n  : CreatePhasedSwingVaultParams;\n\nexport async function validateSwingVaultParams<T extends SwingVaultType>(\n  swingType: T,\n  params: CreateSwingVaultParams<T>,\n) {\n  validateAccountId();\n  const errors: { [key: string]: string[] } = {};\n  const pair = await getPair(params.pairId);\n  const pairPrice = await getPairPrice(params.pairId);\n  if (!pair) errors.pair = ['Pair not found'];\n  if (swingType === 'classic') {\n    const _params = params as CreateClassicSwingVaultParams;\n    if (!_params.buyPrice) errors.buyPrice = ['Buy price is required'];\n    if (!_params.sellPrice) errors.sellPrice = ['Sell price is required'];\n    if (!_params.everyPhasedAmount) errors.everyPhasedAmount = ['Every phased amount is required'];\n    if (new Big(_params.buyPrice).gt(pairPrice)) {\n      errors.buyPrice = ['Buy price is greater than current price'];\n    }\n    if (new Big(_params.sellPrice).lt(pairPrice)) {\n      errors.sellPrice = ['Sell price is less than current price'];\n    }\n  } else {\n    const _params = params as CreatePhasedSwingVaultParams;\n    if (_params.gridAmount < 2 || _params.gridAmount > 8) {\n      errors.gridAmount = ['Grid amount must be between 2 and 8'];\n    }\n    if (!_params.intervalPrice) {\n      errors.intervalPrice = ['Interval price is required'];\n    }\n    if (_params.tradeType === 'buy') {\n      if (!_params.highestBuyPrice)\n        errors.highestBuyPrice = ['Highest buy price is required for buy trades'];\n      else if (new Big(_params.highestBuyPrice).lt(pairPrice)) {\n        errors.highestBuyPrice = ['Highest buy price is less than current price'];\n      }\n    }\n    if (_params.tradeType === 'sell') {\n      if (!_params.lowestSellPrice)\n        errors.lowestSellPrice = ['Lowest sell price is required for sell trades'];\n      else if (new Big(_params.lowestSellPrice).gt(pairPrice)) {\n        errors.lowestSellPrice = ['Lowest sell price is greater than current price'];\n      }\n    }\n    const maxIntervalPrice = await calculateMaxIntervalPrice('phased', _params);\n    if (_params.intervalPrice) {\n      if (_params.tradeType === 'buy' && new Big(_params.intervalPrice).gt(maxIntervalPrice)) {\n        errors.intervalPrice = [`Interval price must be less than or equal to ${maxIntervalPrice}`];\n      }\n      if (_params.tradeType === 'sell' && new Big(_params.intervalPrice).gte(maxIntervalPrice)) {\n        errors.intervalPrice = [`Interval price must be less than to ${maxIntervalPrice}`];\n      }\n    }\n  }\n  if (!params.name) errors.name = ['Name is required'];\n  if (params.slippage && (params.slippage < 0 || params.slippage > 100))\n    errors.slippage = ['Slippage must be between 0 and 100'];\n  if (Object.keys(errors).length > 0) {\n    return errors;\n  }\n}\n\nexport async function getSwingTotalInvestment<T extends SwingVaultType>(\n  swingType: T,\n  params: CreateSwingVaultParams<T>,\n) {\n  const { tradeType, minPrice, maxPrice, gridAmount, intervalPrice, everyPhasedAmount } =\n    transformParams(swingType, params);\n  const entryPrice = await getPairPrice(params.pairId);\n  if (\n    (!minPrice && !maxPrice) ||\n    !gridAmount ||\n    !everyPhasedAmount ||\n    (gridAmount > 1 && !intervalPrice)\n  )\n    return;\n\n  const roundDecimals = 6;\n  const gridInfo: {\n    buy: Big[];\n    sell: Big[];\n    wait: Big[];\n  } = { buy: [], sell: [], wait: [] };\n\n  const _intervalPrice =\n    (minPrice && maxPrice\n      ? new Big(maxPrice)\n          .minus(minPrice)\n          .abs()\n          .div(gridAmount - 1 || 1)\n          .toString()\n      : intervalPrice) || '0';\n\n  const _minPrice =\n    minPrice ||\n    new Big(maxPrice || 0).minus(new Big(_intervalPrice).times(gridAmount - 1)).toString();\n  const _maxPrice =\n    maxPrice ||\n    new Big(minPrice || 0).plus(new Big(_intervalPrice).times(gridAmount - 1)).toString();\n\n  for (let i = 0; i < Number(gridAmount); i++) {\n    const gridPrice =\n      tradeType === 'buy'\n        ? new Big(gridAmount === 1 ? _minPrice : _maxPrice).minus(new Big(_intervalPrice).times(i))\n        : new Big(gridAmount === 1 ? _maxPrice : _minPrice).plus(new Big(_intervalPrice).times(i));\n    tradeType === 'buy' ? gridInfo.buy.push(gridPrice) : gridInfo.sell.push(gridPrice);\n  }\n\n  if (gridAmount === 1) {\n    const waitPrice = tradeType === 'buy' ? _maxPrice : _minPrice;\n    waitPrice && gridInfo.wait.push(new Big(waitPrice));\n  }\n\n  const baseInvestmentPerGrid = new Big(everyPhasedAmount || 0);\n  if (baseInvestmentPerGrid.eq(0)) return;\n\n  const gridOffset = new Big(_intervalPrice)\n    .div(new Big(1).div(baseInvestmentPerGrid))\n    .round(roundDecimals, Big.roundUp)\n    .toString();\n  const firstBaseAmount = baseInvestmentPerGrid.round(roundDecimals, Big.roundUp).toString();\n  const lastBaseAmount = firstBaseAmount;\n\n  const firstQuoteAmount = baseInvestmentPerGrid\n    .times(_minPrice)\n    .round(roundDecimals, Big.roundUp)\n    .toString();\n  const lastQuoteAmount = new Big(firstQuoteAmount)\n    .plus(new Big(gridOffset).times(gridAmount - 1 || 1))\n    .round(roundDecimals, Big.roundUp)\n    .toString();\n\n  const gridBuyCount = gridInfo.buy.length;\n  const gridSellCount = gridInfo.sell.length;\n\n  const totalBaseInvestment = new Big(firstBaseAmount).times(gridInfo.sell.length).toString();\n  const totalQuoteInvestment = new Big(firstQuoteAmount)\n    .times(gridBuyCount)\n    .plus(\n      new Big(gridOffset || 0)\n        .times(gridBuyCount - 1)\n        .times(gridBuyCount)\n        .div(2),\n    )\n    .toString();\n\n  return {\n    gridOffset,\n    firstBaseAmount,\n    lastBaseAmount,\n    firstQuoteAmount,\n    lastQuoteAmount,\n    gridBuyCount,\n    gridSellCount,\n    totalBaseInvestment,\n    totalQuoteInvestment,\n    entryPrice,\n    gridInfo,\n  };\n}\n\nexport async function getSwingMinDeposit<T extends SwingVaultType>(\n  swingType: T,\n  params: CreateSwingVaultParams<T>,\n) {\n  const { minBaseDeposit, minQuoteDeposit } = await getMinDeposit(params.pairId, 'swing');\n  const { minPrice, maxPrice, tradeType } = transformParams(swingType, params);\n  const price =\n    (tradeType === 'buy' && swingType === 'classic') ||\n    (tradeType === 'sell' && swingType === 'phased')\n      ? minPrice\n      : maxPrice;\n\n  if (new Big(price || 0).eq(0)) return minBaseDeposit.toString() || '0';\n  const result = Math.max(\n    Number(minBaseDeposit || '0'),\n    new Big(minQuoteDeposit || '0').div(price || 1).toNumber(),\n  );\n  const pair = await getPair(params.pairId);\n  return parseDisplayAmount(result, pair?.base_token.symbol!, { rm: Big.roundUp });\n}\n\nexport async function createSwingVault<C extends Chain, S extends SwingVaultType>(\n  swingType: S,\n  params: CreateSwingVaultParams<S>,\n) {\n  const errors = await validateSwingVaultParams(swingType, params);\n  if (errors) throw new Error(JSON.stringify(errors));\n  const _params = await transformSwingVaultParams(swingType, params);\n  const chain = globalState.get('chain') as C;\n  const trans = await (chain === 'near'\n    ? botNearContractServices.createGridBot({ ..._params, type: 'grid' })\n    : botSolanaContractServices.createGridBot({ ..._params, type: 'grid' }));\n  return trans as ReturnType<BotContractServices<C>['createGridBot']>;\n}\n\nasync function calculateMaxIntervalPrice<T extends SwingVaultType>(\n  swingType: T,\n  params: CreateSwingVaultParams<T>,\n) {\n  const { minPrice, maxPrice, gridAmount, tradeType } = transformParams(swingType, params);\n  const pair = await getPair(params.pairId);\n  if (!pair) throw new Error('Pair not found');\n  if (tradeType === 'buy') {\n    return maxPrice\n      ? parseDisplayPrice(\n          new Big(maxPrice)\n            .minus(new Big(10).pow(-+(pair.base_token.decimals || 2)))\n            .div(gridAmount)\n            .toString(),\n          pair.base_token.symbol!,\n          { rm: Big.roundDown },\n        )\n      : 0;\n  } else {\n    return minPrice;\n  }\n}\n\nasync function transformSwingVaultParams<T extends SwingVaultType>(\n  swingType: T,\n  params: CreateSwingVaultParams<T>,\n) {\n  const pair = await getPair(params.pairId);\n  if (!pair) throw new Error('Pair not found');\n  const {\n    gridOffset,\n    firstBaseAmount,\n    lastBaseAmount,\n    firstQuoteAmount,\n    lastQuoteAmount,\n    totalBaseInvestment,\n    totalQuoteInvestment,\n    gridBuyCount,\n    gridSellCount,\n    entryPrice,\n  } = (await getSwingTotalInvestment(swingType, params)) || {};\n  const formattedParams = {\n    grid_buy_count: gridBuyCount,\n    grid_sell_count: gridSellCount,\n    grid_type: 'EqOffset',\n    grid_offset: gridOffset,\n    slippage: params.slippage || 1,\n    fill_base_or_quote: true,\n    first_base_amount: firstBaseAmount,\n    last_base_amount: lastBaseAmount,\n    first_quote_amount: firstQuoteAmount,\n    last_quote_amount: lastQuoteAmount,\n    name: params.name,\n    base_token: pair.base_token,\n    quote_token: pair.quote_token,\n    total_base_investment: totalBaseInvestment,\n    total_quote_investment: totalQuoteInvestment,\n    pair_id: pair.pair_id,\n    entry_price: entryPrice,\n    take_profit_price: undefined,\n    trigger_price: undefined,\n    stop_loss_price: undefined,\n  } as GridBotContractParams;\n  return { ...formattedParams };\n}\n\nfunction transformParams<T extends SwingVaultType>(\n  swingType: T,\n  params: CreateSwingVaultParams<T>,\n) {\n  let minPrice: string;\n  let maxPrice: string;\n  let gridAmount: number;\n  let intervalPrice: string;\n  if (swingType === 'classic') {\n    const _params = params as CreateClassicSwingVaultParams;\n    minPrice = _params.buyPrice;\n    maxPrice = _params.sellPrice;\n    gridAmount = 1;\n    intervalPrice = '';\n  } else {\n    const _params = params as CreatePhasedSwingVaultParams;\n    minPrice = _params.lowestSellPrice || '';\n    maxPrice = _params.highestBuyPrice || '';\n    gridAmount = _params.gridAmount;\n    intervalPrice = _params.intervalPrice;\n  }\n  return { ...params, minPrice, maxPrice, gridAmount, intervalPrice };\n}\n", "import { globalState } from '@/stores';\nimport { getPairs, getPairPrices } from './pair';\nimport {\n  getMyGridVaults,\n  getMySwingVaults,\n  getMyDCAVaults,\n  getMarketGridVaults,\n  getMarketSwingVaults,\n  getMarketDCAVaults,\n} from './vaultList';\nimport { getAccountAssets, withdrawAccountAsset } from './userAssets';\nimport { getMarketInfo } from './market';\nimport { generateReferralUrl } from './referral';\nimport {\n  validateDCAVaultParams,\n  getDCAMinDeposit,\n  getDCATotalInvestment,\n  createDCAVault,\n  claimDCAVault,\n  closeDCAVault,\n} from './vault/dca';\nimport {\n  validateGridVaultParams,\n  getGridMinDeposit,\n  getGridTotalInvestment,\n  createGridVault,\n  claimGridVault,\n  closeGridVault,\n} from './vault/grid';\nimport {\n  createSwingVault,\n  getSwingMinDeposit,\n  getSwingTotalInvestment,\n  validateSwingVaultParams,\n} from './vault/swing';\n\nexport type { CreateGridVaultParams } from './vault/grid';\nexport type {\n  CreateSwingVaultParams,\n  CreateClassicSwingVaultParams,\n  CreatePhasedSwingVaultParams,\n} from './vault/swing';\nexport type { CreateDCAVaultParams } from './vault/dca';\n\nexport type { MyVaultsParams, MarketVaultsParams } from './vaultList';\n\nexport type Chain = 'near' | 'solana';\nexport type NetworkId = 'mainnet' | 'testnet';\n\nexport interface SDKParams<ChainType extends Chain = Chain> {\n  /** chain: 'near' | 'solana' */\n  chain: ChainType;\n  /** network: 'mainnet' | 'testnet' */\n  network: NetworkId;\n  /** accountId: current wallet account id */\n  accountId?: string;\n  /** nearConfig: near config */\n  nearConfig?: {\n    /** rpcUrls: near rpc urls */\n    jsonRpcUrls?: string[];\n  };\n  /** solanaConfig: solana config */\n  solanaConfig?: {\n    /** rpcUrls: solana rpc endpoint */\n    endpoint?: string;\n  };\n}\n\nexport default class DeltaTradeSDK<ChainType extends Chain = Chain> {\n  constructor({ chain, network, accountId, nearConfig, solanaConfig }: SDKParams<ChainType>) {\n    globalState.set('chain', chain);\n    globalState.set('network', network);\n    globalState.set('accountId', accountId);\n    globalState.set('nearConfig', nearConfig);\n    globalState.set('solanaConfig', solanaConfig);\n  }\n\n  /**\n   * @description Initialize the SDK environment\n   * @example const sdk = DeltaTradeSDK.initEnv({ chain: 'near', network: 'mainnet',accountId: 'accountId' });\n   */\n  public static initEnv<ChainType extends Chain>(\n    params: SDKParams<ChainType>,\n  ): DeltaTradeSDK<ChainType> {\n    return new DeltaTradeSDK(params);\n  }\n\n  public changeEnv(params: Partial<SDKParams<Chain>>) {\n    if (params.chain) globalState.set('chain', params.chain);\n    if (params.network) globalState.set('network', params.network);\n    if (params.accountId) globalState.set('accountId', params.accountId);\n  }\n\n  public getPairs = getPairs;\n  public getPairPrices = getPairPrices;\n\n  public validateGridVaultParams = validateGridVaultParams;\n  public getGridMinDeposit = getGridMinDeposit;\n  public getGridTotalInvestment = getGridTotalInvestment;\n  public createGridVault = createGridVault<ChainType>;\n\n  public validateSwingVaultParams = validateSwingVaultParams;\n  public getSwingMinDeposit = getSwingMinDeposit;\n  public getSwingTotalInvestment = getSwingTotalInvestment;\n  public createClassicSwingVault = createSwingVault<ChainType, 'classic'>;\n  public createPhasedSwingVault = createSwingVault<ChainType, 'phased'>;\n\n  public validateDCAVaultParams = validateDCAVaultParams;\n  public getDCAMinDeposit = getDCAMinDeposit;\n  public getDCATotalInvestment = getDCATotalInvestment;\n  public createDCAVault = createDCAVault<ChainType>;\n\n  public claimGridVault = claimGridVault<ChainType>;\n  public claimSwingVault = claimGridVault<ChainType>;\n  public claimDCAVault = claimDCAVault<ChainType>;\n\n  public closeGridVault = closeGridVault<ChainType>;\n  public closeSwingVault = closeGridVault<ChainType>;\n  public closeDCAVault = closeDCAVault<ChainType>;\n\n  public getMyGridVaults = getMyGridVaults;\n  public getMySwingVaults = getMySwingVaults;\n  public getMyDCAVaults = getMyDCAVaults;\n  public getMarketGridVaults = getMarketGridVaults;\n  public getMarketSwingVaults = getMarketSwingVaults;\n  public getMarketDCAVaults = getMarketDCAVaults;\n\n  public getMarketInfo = getMarketInfo;\n\n  public getAccountAssets = getAccountAssets;\n  public withdrawAccountAsset = withdrawAccountAsset;\n\n  public generateReferralUrl = generateReferralUrl;\n}\n"],
  "mappings": "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",
  "names": ["Big", "Big", "token", "tokenMeta", "anchor", "PublicKey", "ASSOCIATED_TOKEN_PROGRAM_ID", "getAssociatedTokenAddress", "TOKEN_PROGRAM_ID", "Big", "PublicKey", "getAssociatedTokenAddress", "TOKEN_PROGRAM_ID", "ASSOCIATED_TOKEN_PROGRAM_ID", "Big", "Big", "Big", "Big", "Big", "Big", "Big", "Big", "Big"]
}
